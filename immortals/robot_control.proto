syntax = "proto3";

package Immortals.Protos;

// Move robot with wheel velocities
message MoveWheelVelocity
{
    // Velocity [m/s] of front right wheel
    float front_right = 1;
    // Velocity [m/s] of back right wheel
    float back_right = 2;
    // Velocity [m/s] of back left wheel
    float back_left = 3;
    // Velocity [m/s] of front left wheel
    float front_left = 4;
}

// Move robot with local velocity
message MoveLocalVelocity
{
    // Velocity forward [m/s] (towards the dribbler)
    float forward = 1;
    // Velocity to the left [m/s]
    float left = 2;
    // Angular velocity counter-clockwise [rad/s]
    float angular = 3;
}

// Move robot with global velocity
message MoveGlobalVelocity
{
    // Velocity on x-axis of the field [m/s]
    float x = 1;
    // Velocity on y-axis of the field [m/s]
    float y = 2;
    // Angular velocity counter-clockwise [rad/s]
    float angular = 3;
}

// Wrapper for different kinds of movement commands
message MoveCommand
{
    oneof command
    {
        // Move with wheel velocities
        MoveWheelVelocity wheel_velocity = 1;
        // Move with local velocity
        MoveLocalVelocity local_velocity = 2;
        // Move with global velocity
        MoveGlobalVelocity global_velocity = 3;
    }
}

// Full command for a single robot
message RobotCommand
{
    enum KickType
    {
        None   = 0;
        Direct = 1;
        Chip   = 2;
    }

    // Id of the robot
    uint32 id = 1;
    
    // Movement command
    MoveCommand move_command = 2;

    bool mikona_enabled = 3;
    // Absolute (3 dimensional) kick speed [m/s]
    float kick_speed = 4;
    // Kick angle [degree] (defaults to 0 degrees for a straight kick)
    KickType kick_type = 5;
    
    // Dribbler speed in rounds per minute [rpm]
    float dribbler_speed = 6;
}

// Command from the connected client to the simulator
message RobotControl 
{
    // Control the robots
    repeated RobotCommand robot_commands = 1;
}
