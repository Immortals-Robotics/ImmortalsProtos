// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strategy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "strategy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SyncPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Waypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waypoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Waypoint_WayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Waypoint_VelProfile_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* Strategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Strategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayBook_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_strategy_2eproto() {
  protobuf_AddDesc_strategy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "strategy.proto");
  GOOGLE_CHECK(file != NULL);
  SyncPoint_descriptor_ = file->message_type(0);
  static const int SyncPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoint, robotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoint, pointid_),
  };
  SyncPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPoint_descriptor_,
      SyncPoint::default_instance_,
      SyncPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPoint));
  SyncData_descriptor_ = file->message_type(1);
  static const int SyncData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncData, point_),
  };
  SyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncData_descriptor_,
      SyncData::default_instance_,
      SyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncData));
  Waypoint_descriptor_ = file->message_type(2);
  static const int Waypoint_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, needrrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, time_),
  };
  Waypoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waypoint_descriptor_,
      Waypoint::default_instance_,
      Waypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waypoint));
  Waypoint_WayType_descriptor_ = Waypoint_descriptor_->enum_type(0);
  Waypoint_VelProfile_descriptor_ = Waypoint_descriptor_->enum_type(1);
  Role_descriptor_ = file->message_type(3);
  static const int Role_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, afterlife_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  Strategy_descriptor_ = file->message_type(4);
  static const int Strategy_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, minx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, maxx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, miny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, maxy_),
  };
  Strategy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Strategy_descriptor_,
      Strategy::default_instance_,
      Strategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Strategy));
  PlayBook_descriptor_ = file->message_type(5);
  static const int PlayBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayBook, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayBook, weight_),
  };
  PlayBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayBook_descriptor_,
      PlayBook::default_instance_,
      PlayBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayBook));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_strategy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPoint_descriptor_, &SyncPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncData_descriptor_, &SyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waypoint_descriptor_, &Waypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Strategy_descriptor_, &Strategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayBook_descriptor_, &PlayBook::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_strategy_2eproto() {
  delete SyncPoint::default_instance_;
  delete SyncPoint_reflection_;
  delete SyncData::default_instance_;
  delete SyncData_reflection_;
  delete Waypoint::default_instance_;
  delete Waypoint_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete Role::_default_name_;
  delete Strategy::default_instance_;
  delete Strategy_reflection_;
  delete PlayBook::default_instance_;
  delete PlayBook_reflection_;
}

void protobuf_AddDesc_strategy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016strategy.proto\"-\n\tSyncPoint\022\017\n\007robotID"
    "\030\001 \002(\005\022\017\n\007pointID\030\002 \002(\005\"%\n\010SyncData\022\031\n\005p"
    "oint\030\001 \003(\0132\n.SyncPoint\"\230\002\n\010Waypoint\022$\n\004t"
    "ype\030\001 \002(\0162\021.Waypoint.WayType:\003POS\022\t\n\001x\030\002"
    " \002(\002\022\t\n\001y\030\003 \002(\002\022\025\n\007needRRT\030\004 \002(\010:\004true\022\022"
    "\n\005speed\030\005 \002(\002:\003100\022.\n\007profile\030\006 \002(\0162\024.Wa"
    "ypoint.VelProfile:\007MAMOOLI\022\026\n\ttolerance\030"
    "\007 \001(\002:\003100\022\014\n\004time\030\010 \001(\002\"\034\n\007WayType\022\007\n\003P"
    "OS\020\000\022\010\n\004TIME\020\001\"1\n\nVelProfile\022\t\n\005AROOM\020\000\022"
    "\013\n\007MAMOOLI\020\001\022\013\n\007KHARAKI\020\002\"Q\n\004Role\022\n\n\002id\030"
    "\001 \002(\005\022\021\n\004name\030\002 \001(\t:\003NAN\022\027\n\004path\030\003 \003(\0132\t"
    ".Waypoint\022\021\n\tafterlife\030\004 \002(\005\"~\n\010Strategy"
    "\022\014\n\004name\030\001 \002(\t\022\023\n\004role\030\002 \003(\0132\005.Role\022\027\n\004s"
    "ync\030\003 \003(\0132\t.SyncData\022\014\n\004minX\030\004 \002(\002\022\014\n\004ma"
    "xX\030\005 \002(\002\022\014\n\004minY\030\006 \002(\002\022\014\n\004maxY\030\007 \002(\002\"7\n\010"
    "PlayBook\022\033\n\010strategy\030\001 \003(\0132\t.Strategy\022\016\n"
    "\006weight\030\002 \003(\002", 653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "strategy.proto", &protobuf_RegisterTypes);
  SyncPoint::default_instance_ = new SyncPoint();
  SyncData::default_instance_ = new SyncData();
  Waypoint::default_instance_ = new Waypoint();
  Role::_default_name_ =
      new ::std::string("NAN", 3);
  Role::default_instance_ = new Role();
  Strategy::default_instance_ = new Strategy();
  PlayBook::default_instance_ = new PlayBook();
  SyncPoint::default_instance_->InitAsDefaultInstance();
  SyncData::default_instance_->InitAsDefaultInstance();
  Waypoint::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  Strategy::default_instance_->InitAsDefaultInstance();
  PlayBook::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_strategy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_strategy_2eproto {
  StaticDescriptorInitializer_strategy_2eproto() {
    protobuf_AddDesc_strategy_2eproto();
  }
} static_descriptor_initializer_strategy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SyncPoint::kRobotIDFieldNumber;
const int SyncPoint::kPointIDFieldNumber;
#endif  // !_MSC_VER

SyncPoint::SyncPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncPoint)
}

void SyncPoint::InitAsDefaultInstance() {
}

SyncPoint::SyncPoint(const SyncPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncPoint)
}

void SyncPoint::SharedCtor() {
  _cached_size_ = 0;
  robotid_ = 0;
  pointid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPoint::~SyncPoint() {
  // @@protoc_insertion_point(destructor:SyncPoint)
  SharedDtor();
}

void SyncPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPoint_descriptor_;
}

const SyncPoint& SyncPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

SyncPoint* SyncPoint::default_instance_ = NULL;

SyncPoint* SyncPoint::New() const {
  return new SyncPoint;
}

void SyncPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(robotid_, pointid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 robotID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotid_)));
          set_has_robotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pointID;
        break;
      }

      // required int32 pointID = 2;
      case 2: {
        if (tag == 16) {
         parse_pointID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncPoint)
  return false;
#undef DO_
}

void SyncPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncPoint)
  // required int32 robotID = 1;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robotid(), output);
  }

  // required int32 pointID = 2;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncPoint)
}

::google::protobuf::uint8* SyncPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncPoint)
  // required int32 robotID = 1;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robotid(), target);
  }

  // required int32 pointID = 2;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pointid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncPoint)
  return target;
}

int SyncPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 robotID = 1;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotid());
    }

    // required int32 pointID = 2;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPoint::MergeFrom(const SyncPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPoint::CopyFrom(const SyncPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SyncPoint::Swap(SyncPoint* other) {
  if (other != this) {
    std::swap(robotid_, other->robotid_);
    std::swap(pointid_, other->pointid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPoint_descriptor_;
  metadata.reflection = SyncPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncData::kPointFieldNumber;
#endif  // !_MSC_VER

SyncData::SyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncData)
}

void SyncData::InitAsDefaultInstance() {
}

SyncData::SyncData(const SyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncData)
}

void SyncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncData::~SyncData() {
  // @@protoc_insertion_point(destructor:SyncData)
  SharedDtor();
}

void SyncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncData_descriptor_;
}

const SyncData& SyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

SyncData* SyncData::default_instance_ = NULL;

SyncData* SyncData::New() const {
  return new SyncData;
}

void SyncData::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SyncPoint point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncData)
  return false;
#undef DO_
}

void SyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncData)
  // repeated .SyncPoint point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncData)
}

::google::protobuf::uint8* SyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncData)
  // repeated .SyncPoint point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncData)
  return target;
}

int SyncData::ByteSize() const {
  int total_size = 0;

  // repeated .SyncPoint point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncData::MergeFrom(const SyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncData::CopyFrom(const SyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void SyncData::Swap(SyncData* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncData_descriptor_;
  metadata.reflection = SyncData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Waypoint_WayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_WayType_descriptor_;
}
bool Waypoint_WayType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Waypoint_WayType Waypoint::POS;
const Waypoint_WayType Waypoint::TIME;
const Waypoint_WayType Waypoint::WayType_MIN;
const Waypoint_WayType Waypoint::WayType_MAX;
const int Waypoint::WayType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Waypoint_VelProfile_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_VelProfile_descriptor_;
}
bool Waypoint_VelProfile_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Waypoint_VelProfile Waypoint::AROOM;
const Waypoint_VelProfile Waypoint::MAMOOLI;
const Waypoint_VelProfile Waypoint::KHARAKI;
const Waypoint_VelProfile Waypoint::VelProfile_MIN;
const Waypoint_VelProfile Waypoint::VelProfile_MAX;
const int Waypoint::VelProfile_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Waypoint::kTypeFieldNumber;
const int Waypoint::kXFieldNumber;
const int Waypoint::kYFieldNumber;
const int Waypoint::kNeedRRTFieldNumber;
const int Waypoint::kSpeedFieldNumber;
const int Waypoint::kProfileFieldNumber;
const int Waypoint::kToleranceFieldNumber;
const int Waypoint::kTimeFieldNumber;
#endif  // !_MSC_VER

Waypoint::Waypoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Waypoint)
}

void Waypoint::InitAsDefaultInstance() {
}

Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Waypoint)
}

void Waypoint::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  y_ = 0;
  needrrt_ = true;
  speed_ = 100;
  profile_ = 1;
  tolerance_ = 100;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_descriptor_;
}

const Waypoint& Waypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

Waypoint* Waypoint::default_instance_ = NULL;

Waypoint* Waypoint::New() const {
  return new Waypoint;
}

void Waypoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Waypoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, y_);
    needrrt_ = true;
    speed_ = 100;
    profile_ = 1;
    tolerance_ = 100;
    time_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Waypoint.WayType type = 1 [default = POS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Waypoint_WayType_IsValid(value)) {
            set_type(static_cast< ::Waypoint_WayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_needRRT;
        break;
      }

      // required bool needRRT = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_needRRT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrrt_)));
          set_has_needrrt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // required float speed = 5 [default = 100];
      case 5: {
        if (tag == 45) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_profile;
        break;
      }

      // required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
      case 6: {
        if (tag == 48) {
         parse_profile:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Waypoint_VelProfile_IsValid(value)) {
            set_profile(static_cast< ::Waypoint_VelProfile >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_tolerance;
        break;
      }

      // optional float tolerance = 7 [default = 100];
      case 7: {
        if (tag == 61) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_time;
        break;
      }

      // optional float time = 8;
      case 8: {
        if (tag == 69) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Waypoint)
  // required .Waypoint.WayType type = 1 [default = POS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required bool needRRT = 4 [default = true];
  if (has_needrrt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needrrt(), output);
  }

  // required float speed = 5 [default = 100];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->profile(), output);
  }

  // optional float tolerance = 7 [default = 100];
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tolerance(), output);
  }

  // optional float time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Waypoint)
}

::google::protobuf::uint8* Waypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Waypoint)
  // required .Waypoint.WayType type = 1 [default = POS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required bool needRRT = 4 [default = true];
  if (has_needrrt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->needrrt(), target);
  }

  // required float speed = 5 [default = 100];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->profile(), target);
  }

  // optional float tolerance = 7 [default = 100];
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tolerance(), target);
  }

  // optional float time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Waypoint)
  return target;
}

int Waypoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Waypoint.WayType type = 1 [default = POS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required bool needRRT = 4 [default = true];
    if (has_needrrt()) {
      total_size += 1 + 1;
    }

    // required float speed = 5 [default = 100];
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profile());
    }

    // optional float tolerance = 7 [default = 100];
    if (has_tolerance()) {
      total_size += 1 + 4;
    }

    // optional float time = 8;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_needrrt()) {
      set_needrrt(from.needrrt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_profile()) {
      set_profile(from.profile());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(needrrt_, other->needrrt_);
    std::swap(speed_, other->speed_);
    std::swap(profile_, other->profile_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waypoint_descriptor_;
  metadata.reflection = Waypoint_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Role::_default_name_ = NULL;
#ifndef _MSC_VER
const int Role::kIdFieldNumber;
const int Role::kNameFieldNumber;
const int Role::kPathFieldNumber;
const int Role::kAfterlifeFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Role)
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Role)
}

void Role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  afterlife_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:Role)
  SharedDtor();
}

void Role::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Role*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, afterlife_);
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2 [default = "NAN"];
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // repeated .Waypoint path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        if (input->ExpectTag(32)) goto parse_afterlife;
        break;
      }

      // required int32 afterlife = 4;
      case 4: {
        if (tag == 32) {
         parse_afterlife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterlife_)));
          set_has_afterlife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Role)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2 [default = "NAN"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Waypoint path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  // required int32 afterlife = 4;
  if (has_afterlife()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->afterlife(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Role)
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Role)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2 [default = "NAN"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Waypoint path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(i), target);
  }

  // required int32 afterlife = 4;
  if (has_afterlife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->afterlife(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Role)
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2 [default = "NAN"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 afterlife = 4;
    if (has_afterlife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterlife());
    }

  }
  // repeated .Waypoint path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_afterlife()) {
      set_afterlife(from.afterlife());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    path_.Swap(&other->path_);
    std::swap(afterlife_, other->afterlife_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Strategy::kNameFieldNumber;
const int Strategy::kRoleFieldNumber;
const int Strategy::kSyncFieldNumber;
const int Strategy::kMinXFieldNumber;
const int Strategy::kMaxXFieldNumber;
const int Strategy::kMinYFieldNumber;
const int Strategy::kMaxYFieldNumber;
#endif  // !_MSC_VER

Strategy::Strategy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Strategy)
}

void Strategy::InitAsDefaultInstance() {
}

Strategy::Strategy(const Strategy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Strategy)
}

void Strategy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minx_ = 0;
  maxx_ = 0;
  miny_ = 0;
  maxy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Strategy::~Strategy() {
  // @@protoc_insertion_point(destructor:Strategy)
  SharedDtor();
}

void Strategy::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Strategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Strategy_descriptor_;
}

const Strategy& Strategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

Strategy* Strategy::default_instance_ = NULL;

Strategy* Strategy::New() const {
  return new Strategy;
}

void Strategy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Strategy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 121) {
    ZR_(minx_, maxy_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_.Clear();
  sync_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // repeated .Role role = 2;
      case 2: {
        if (tag == 18) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role;
        if (input->ExpectTag(26)) goto parse_sync;
        break;
      }

      // repeated .SyncData sync = 3;
      case 3: {
        if (tag == 26) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sync;
        if (input->ExpectTag(37)) goto parse_minX;
        break;
      }

      // required float minX = 4;
      case 4: {
        if (tag == 37) {
         parse_minX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minx_)));
          set_has_minx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_maxX;
        break;
      }

      // required float maxX = 5;
      case 5: {
        if (tag == 45) {
         parse_maxX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxx_)));
          set_has_maxx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_minY;
        break;
      }

      // required float minY = 6;
      case 6: {
        if (tag == 53) {
         parse_minY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miny_)));
          set_has_miny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_maxY;
        break;
      }

      // required float maxY = 7;
      case 7: {
        if (tag == 61) {
         parse_maxY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxy_)));
          set_has_maxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Strategy)
  return false;
#undef DO_
}

void Strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Strategy)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Role role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(i), output);
  }

  // repeated .SyncData sync = 3;
  for (int i = 0; i < this->sync_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sync(i), output);
  }

  // required float minX = 4;
  if (has_minx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->minx(), output);
  }

  // required float maxX = 5;
  if (has_maxx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->maxx(), output);
  }

  // required float minY = 6;
  if (has_miny()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->miny(), output);
  }

  // required float maxY = 7;
  if (has_maxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Strategy)
}

::google::protobuf::uint8* Strategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Strategy)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Role role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(i), target);
  }

  // repeated .SyncData sync = 3;
  for (int i = 0; i < this->sync_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sync(i), target);
  }

  // required float minX = 4;
  if (has_minx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->minx(), target);
  }

  // required float maxX = 5;
  if (has_maxx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->maxx(), target);
  }

  // required float minY = 6;
  if (has_miny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->miny(), target);
  }

  // required float maxY = 7;
  if (has_maxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Strategy)
  return target;
}

int Strategy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float minX = 4;
    if (has_minx()) {
      total_size += 1 + 4;
    }

    // required float maxX = 5;
    if (has_maxx()) {
      total_size += 1 + 4;
    }

    // required float minY = 6;
    if (has_miny()) {
      total_size += 1 + 4;
    }

    // required float maxY = 7;
    if (has_maxy()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Role role = 2;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  // repeated .SyncData sync = 3;
  total_size += 1 * this->sync_size();
  for (int i = 0; i < this->sync_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Strategy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Strategy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Strategy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Strategy::MergeFrom(const Strategy& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  sync_.MergeFrom(from.sync_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_minx()) {
      set_minx(from.minx());
    }
    if (from.has_maxx()) {
      set_maxx(from.maxx());
    }
    if (from.has_miny()) {
      set_miny(from.miny());
    }
    if (from.has_maxy()) {
      set_maxy(from.maxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Strategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strategy::CopyFrom(const Strategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strategy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->role())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sync())) return false;
  return true;
}

void Strategy::Swap(Strategy* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    role_.Swap(&other->role_);
    sync_.Swap(&other->sync_);
    std::swap(minx_, other->minx_);
    std::swap(maxx_, other->maxx_);
    std::swap(miny_, other->miny_);
    std::swap(maxy_, other->maxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Strategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Strategy_descriptor_;
  metadata.reflection = Strategy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayBook::kStrategyFieldNumber;
const int PlayBook::kWeightFieldNumber;
#endif  // !_MSC_VER

PlayBook::PlayBook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayBook)
}

void PlayBook::InitAsDefaultInstance() {
}

PlayBook::PlayBook(const PlayBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayBook)
}

void PlayBook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayBook::~PlayBook() {
  // @@protoc_insertion_point(destructor:PlayBook)
  SharedDtor();
}

void PlayBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayBook_descriptor_;
}

const PlayBook& PlayBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strategy_2eproto();
  return *default_instance_;
}

PlayBook* PlayBook::default_instance_ = NULL;

PlayBook* PlayBook::New() const {
  return new PlayBook;
}

void PlayBook::Clear() {
  strategy_.Clear();
  weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayBook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Strategy strategy = 1;
      case 1: {
        if (tag == 10) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_strategy;
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }

      // repeated float weight = 2;
      case 2: {
        if (tag == 21) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_weight())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayBook)
  return false;
#undef DO_
}

void PlayBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayBook)
  // repeated .Strategy strategy = 1;
  for (int i = 0; i < this->strategy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strategy(i), output);
  }

  // repeated float weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->weight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayBook)
}

::google::protobuf::uint8* PlayBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayBook)
  // repeated .Strategy strategy = 1;
  for (int i = 0; i < this->strategy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strategy(i), target);
  }

  // repeated float weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->weight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayBook)
  return target;
}

int PlayBook::ByteSize() const {
  int total_size = 0;

  // repeated .Strategy strategy = 1;
  total_size += 1 * this->strategy_size();
  for (int i = 0; i < this->strategy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy(i));
  }

  // repeated float weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->weight_size();
    total_size += 1 * this->weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayBook::MergeFrom(const PlayBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  strategy_.MergeFrom(from.strategy_);
  weight_.MergeFrom(from.weight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayBook::CopyFrom(const PlayBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayBook::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strategy())) return false;
  return true;
}

void PlayBook::Swap(PlayBook* other) {
  if (other != this) {
    strategy_.Swap(&other->strategy_);
    weight_.Swap(&other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayBook_descriptor_;
  metadata.reflection = PlayBook_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
