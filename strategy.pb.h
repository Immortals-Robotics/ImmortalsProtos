// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strategy.proto

#ifndef PROTOBUF_strategy_2eproto__INCLUDED
#define PROTOBUF_strategy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_strategy_2eproto();
void protobuf_AssignDesc_strategy_2eproto();
void protobuf_ShutdownFile_strategy_2eproto();

class SyncPoint;
class SyncData;
class Waypoint;
class Role;
class Strategy;
class PlayBook;

enum Waypoint_WayType {
  Waypoint_WayType_POS = 0,
  Waypoint_WayType_TIME = 1
};
bool Waypoint_WayType_IsValid(int value);
const Waypoint_WayType Waypoint_WayType_WayType_MIN = Waypoint_WayType_POS;
const Waypoint_WayType Waypoint_WayType_WayType_MAX = Waypoint_WayType_TIME;
const int Waypoint_WayType_WayType_ARRAYSIZE = Waypoint_WayType_WayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Waypoint_WayType_descriptor();
inline const ::std::string& Waypoint_WayType_Name(Waypoint_WayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Waypoint_WayType_descriptor(), value);
}
inline bool Waypoint_WayType_Parse(
    const ::std::string& name, Waypoint_WayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Waypoint_WayType>(
    Waypoint_WayType_descriptor(), name, value);
}
enum Waypoint_VelProfile {
  Waypoint_VelProfile_AROOM = 0,
  Waypoint_VelProfile_MAMOOLI = 1,
  Waypoint_VelProfile_KHARAKI = 2
};
bool Waypoint_VelProfile_IsValid(int value);
const Waypoint_VelProfile Waypoint_VelProfile_VelProfile_MIN = Waypoint_VelProfile_AROOM;
const Waypoint_VelProfile Waypoint_VelProfile_VelProfile_MAX = Waypoint_VelProfile_KHARAKI;
const int Waypoint_VelProfile_VelProfile_ARRAYSIZE = Waypoint_VelProfile_VelProfile_MAX + 1;

const ::google::protobuf::EnumDescriptor* Waypoint_VelProfile_descriptor();
inline const ::std::string& Waypoint_VelProfile_Name(Waypoint_VelProfile value) {
  return ::google::protobuf::internal::NameOfEnum(
    Waypoint_VelProfile_descriptor(), value);
}
inline bool Waypoint_VelProfile_Parse(
    const ::std::string& name, Waypoint_VelProfile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Waypoint_VelProfile>(
    Waypoint_VelProfile_descriptor(), name, value);
}
// ===================================================================

class SyncPoint : public ::google::protobuf::Message {
 public:
  SyncPoint();
  virtual ~SyncPoint();

  SyncPoint(const SyncPoint& from);

  inline SyncPoint& operator=(const SyncPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPoint& default_instance();

  void Swap(SyncPoint* other);

  // implements Message ----------------------------------------------

  SyncPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncPoint& from);
  void MergeFrom(const SyncPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 robotID = 1;
  inline bool has_robotid() const;
  inline void clear_robotid();
  static const int kRobotIDFieldNumber = 1;
  inline ::google::protobuf::int32 robotid() const;
  inline void set_robotid(::google::protobuf::int32 value);

  // required int32 pointID = 2;
  inline bool has_pointid() const;
  inline void clear_pointid();
  static const int kPointIDFieldNumber = 2;
  inline ::google::protobuf::int32 pointid() const;
  inline void set_pointid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SyncPoint)
 private:
  inline void set_has_robotid();
  inline void clear_has_robotid();
  inline void set_has_pointid();
  inline void clear_has_pointid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 robotid_;
  ::google::protobuf::int32 pointid_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static SyncPoint* default_instance_;
};
// -------------------------------------------------------------------

class SyncData : public ::google::protobuf::Message {
 public:
  SyncData();
  virtual ~SyncData();

  SyncData(const SyncData& from);

  inline SyncData& operator=(const SyncData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncData& default_instance();

  void Swap(SyncData* other);

  // implements Message ----------------------------------------------

  SyncData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncData& from);
  void MergeFrom(const SyncData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SyncPoint point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::SyncPoint& point(int index) const;
  inline ::SyncPoint* mutable_point(int index);
  inline ::SyncPoint* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::SyncPoint >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::SyncPoint >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:SyncData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SyncPoint > point_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static SyncData* default_instance_;
};
// -------------------------------------------------------------------

class Waypoint : public ::google::protobuf::Message {
 public:
  Waypoint();
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoint& default_instance();

  void Swap(Waypoint* other);

  // implements Message ----------------------------------------------

  Waypoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Waypoint_WayType WayType;
  static const WayType POS = Waypoint_WayType_POS;
  static const WayType TIME = Waypoint_WayType_TIME;
  static inline bool WayType_IsValid(int value) {
    return Waypoint_WayType_IsValid(value);
  }
  static const WayType WayType_MIN =
    Waypoint_WayType_WayType_MIN;
  static const WayType WayType_MAX =
    Waypoint_WayType_WayType_MAX;
  static const int WayType_ARRAYSIZE =
    Waypoint_WayType_WayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WayType_descriptor() {
    return Waypoint_WayType_descriptor();
  }
  static inline const ::std::string& WayType_Name(WayType value) {
    return Waypoint_WayType_Name(value);
  }
  static inline bool WayType_Parse(const ::std::string& name,
      WayType* value) {
    return Waypoint_WayType_Parse(name, value);
  }

  typedef Waypoint_VelProfile VelProfile;
  static const VelProfile AROOM = Waypoint_VelProfile_AROOM;
  static const VelProfile MAMOOLI = Waypoint_VelProfile_MAMOOLI;
  static const VelProfile KHARAKI = Waypoint_VelProfile_KHARAKI;
  static inline bool VelProfile_IsValid(int value) {
    return Waypoint_VelProfile_IsValid(value);
  }
  static const VelProfile VelProfile_MIN =
    Waypoint_VelProfile_VelProfile_MIN;
  static const VelProfile VelProfile_MAX =
    Waypoint_VelProfile_VelProfile_MAX;
  static const int VelProfile_ARRAYSIZE =
    Waypoint_VelProfile_VelProfile_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VelProfile_descriptor() {
    return Waypoint_VelProfile_descriptor();
  }
  static inline const ::std::string& VelProfile_Name(VelProfile value) {
    return Waypoint_VelProfile_Name(value);
  }
  static inline bool VelProfile_Parse(const ::std::string& name,
      VelProfile* value) {
    return Waypoint_VelProfile_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Waypoint.WayType type = 1 [default = POS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Waypoint_WayType type() const;
  inline void set_type(::Waypoint_WayType value);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // required bool needRRT = 4 [default = true];
  inline bool has_needrrt() const;
  inline void clear_needrrt();
  static const int kNeedRRTFieldNumber = 4;
  inline bool needrrt() const;
  inline void set_needrrt(bool value);

  // required float speed = 5 [default = 100];
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline float speed() const;
  inline void set_speed(float value);

  // required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 6;
  inline ::Waypoint_VelProfile profile() const;
  inline void set_profile(::Waypoint_VelProfile value);

  // optional float tolerance = 7 [default = 100];
  inline bool has_tolerance() const;
  inline void clear_tolerance();
  static const int kToleranceFieldNumber = 7;
  inline float tolerance() const;
  inline void set_tolerance(float value);

  // optional float time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline float time() const;
  inline void set_time(float value);

  // @@protoc_insertion_point(class_scope:Waypoint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_needrrt();
  inline void clear_has_needrrt();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_tolerance();
  inline void clear_has_tolerance();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  float x_;
  float y_;
  bool needrrt_;
  float speed_;
  int profile_;
  float tolerance_;
  float time_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static Waypoint* default_instance_;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  void Swap(Role* other);

  // implements Message ----------------------------------------------

  Role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2 [default = "NAN"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Waypoint path = 3;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::Waypoint& path(int index) const;
  inline ::Waypoint* mutable_path(int index);
  inline ::Waypoint* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::Waypoint >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::Waypoint >*
      mutable_path();

  // required int32 afterlife = 4;
  inline bool has_afterlife() const;
  inline void clear_afterlife();
  static const int kAfterlifeFieldNumber = 4;
  inline ::google::protobuf::int32 afterlife() const;
  inline void set_afterlife(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Role)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_afterlife();
  inline void clear_has_afterlife();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 afterlife_;
  ::google::protobuf::RepeatedPtrField< ::Waypoint > path_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static Role* default_instance_;
};
// -------------------------------------------------------------------

class Strategy : public ::google::protobuf::Message {
 public:
  Strategy();
  virtual ~Strategy();

  Strategy(const Strategy& from);

  inline Strategy& operator=(const Strategy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Strategy& default_instance();

  void Swap(Strategy* other);

  // implements Message ----------------------------------------------

  Strategy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Strategy& from);
  void MergeFrom(const Strategy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Role role = 2;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::Role& role(int index) const;
  inline ::Role* mutable_role(int index);
  inline ::Role* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::Role >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role >*
      mutable_role();

  // repeated .SyncData sync = 3;
  inline int sync_size() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 3;
  inline const ::SyncData& sync(int index) const;
  inline ::SyncData* mutable_sync(int index);
  inline ::SyncData* add_sync();
  inline const ::google::protobuf::RepeatedPtrField< ::SyncData >&
      sync() const;
  inline ::google::protobuf::RepeatedPtrField< ::SyncData >*
      mutable_sync();

  // required float minX = 4;
  inline bool has_minx() const;
  inline void clear_minx();
  static const int kMinXFieldNumber = 4;
  inline float minx() const;
  inline void set_minx(float value);

  // required float maxX = 5;
  inline bool has_maxx() const;
  inline void clear_maxx();
  static const int kMaxXFieldNumber = 5;
  inline float maxx() const;
  inline void set_maxx(float value);

  // required float minY = 6;
  inline bool has_miny() const;
  inline void clear_miny();
  static const int kMinYFieldNumber = 6;
  inline float miny() const;
  inline void set_miny(float value);

  // required float maxY = 7;
  inline bool has_maxy() const;
  inline void clear_maxy();
  static const int kMaxYFieldNumber = 7;
  inline float maxy() const;
  inline void set_maxy(float value);

  // @@protoc_insertion_point(class_scope:Strategy)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_minx();
  inline void clear_has_minx();
  inline void set_has_maxx();
  inline void clear_has_maxx();
  inline void set_has_miny();
  inline void clear_has_miny();
  inline void set_has_maxy();
  inline void clear_has_maxy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Role > role_;
  ::google::protobuf::RepeatedPtrField< ::SyncData > sync_;
  float minx_;
  float maxx_;
  float miny_;
  float maxy_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static Strategy* default_instance_;
};
// -------------------------------------------------------------------

class PlayBook : public ::google::protobuf::Message {
 public:
  PlayBook();
  virtual ~PlayBook();

  PlayBook(const PlayBook& from);

  inline PlayBook& operator=(const PlayBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayBook& default_instance();

  void Swap(PlayBook* other);

  // implements Message ----------------------------------------------

  PlayBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayBook& from);
  void MergeFrom(const PlayBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Strategy strategy = 1;
  inline int strategy_size() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 1;
  inline const ::Strategy& strategy(int index) const;
  inline ::Strategy* mutable_strategy(int index);
  inline ::Strategy* add_strategy();
  inline const ::google::protobuf::RepeatedPtrField< ::Strategy >&
      strategy() const;
  inline ::google::protobuf::RepeatedPtrField< ::Strategy >*
      mutable_strategy();

  // repeated float weight = 2;
  inline int weight_size() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight(int index) const;
  inline void set_weight(int index, float value);
  inline void add_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // @@protoc_insertion_point(class_scope:PlayBook)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Strategy > strategy_;
  ::google::protobuf::RepeatedField< float > weight_;
  friend void  protobuf_AddDesc_strategy_2eproto();
  friend void protobuf_AssignDesc_strategy_2eproto();
  friend void protobuf_ShutdownFile_strategy_2eproto();

  void InitAsDefaultInstance();
  static PlayBook* default_instance_;
};
// ===================================================================


// ===================================================================

// SyncPoint

// required int32 robotID = 1;
inline bool SyncPoint::has_robotid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncPoint::set_has_robotid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncPoint::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncPoint::clear_robotid() {
  robotid_ = 0;
  clear_has_robotid();
}
inline ::google::protobuf::int32 SyncPoint::robotid() const {
  // @@protoc_insertion_point(field_get:SyncPoint.robotID)
  return robotid_;
}
inline void SyncPoint::set_robotid(::google::protobuf::int32 value) {
  set_has_robotid();
  robotid_ = value;
  // @@protoc_insertion_point(field_set:SyncPoint.robotID)
}

// required int32 pointID = 2;
inline bool SyncPoint::has_pointid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncPoint::set_has_pointid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncPoint::clear_has_pointid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncPoint::clear_pointid() {
  pointid_ = 0;
  clear_has_pointid();
}
inline ::google::protobuf::int32 SyncPoint::pointid() const {
  // @@protoc_insertion_point(field_get:SyncPoint.pointID)
  return pointid_;
}
inline void SyncPoint::set_pointid(::google::protobuf::int32 value) {
  set_has_pointid();
  pointid_ = value;
  // @@protoc_insertion_point(field_set:SyncPoint.pointID)
}

// -------------------------------------------------------------------

// SyncData

// repeated .SyncPoint point = 1;
inline int SyncData::point_size() const {
  return point_.size();
}
inline void SyncData::clear_point() {
  point_.Clear();
}
inline const ::SyncPoint& SyncData::point(int index) const {
  // @@protoc_insertion_point(field_get:SyncData.point)
  return point_.Get(index);
}
inline ::SyncPoint* SyncData::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:SyncData.point)
  return point_.Mutable(index);
}
inline ::SyncPoint* SyncData::add_point() {
  // @@protoc_insertion_point(field_add:SyncData.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SyncPoint >&
SyncData::point() const {
  // @@protoc_insertion_point(field_list:SyncData.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::SyncPoint >*
SyncData::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:SyncData.point)
  return &point_;
}

// -------------------------------------------------------------------

// Waypoint

// required .Waypoint.WayType type = 1 [default = POS];
inline bool Waypoint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waypoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waypoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Waypoint_WayType Waypoint::type() const {
  // @@protoc_insertion_point(field_get:Waypoint.type)
  return static_cast< ::Waypoint_WayType >(type_);
}
inline void Waypoint::set_type(::Waypoint_WayType value) {
  assert(::Waypoint_WayType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.type)
}

// required float x = 2;
inline bool Waypoint::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waypoint::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Waypoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Waypoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Waypoint::x() const {
  // @@protoc_insertion_point(field_get:Waypoint.x)
  return x_;
}
inline void Waypoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.x)
}

// required float y = 3;
inline bool Waypoint::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waypoint::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waypoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waypoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Waypoint::y() const {
  // @@protoc_insertion_point(field_get:Waypoint.y)
  return y_;
}
inline void Waypoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.y)
}

// required bool needRRT = 4 [default = true];
inline bool Waypoint::has_needrrt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Waypoint::set_has_needrrt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Waypoint::clear_has_needrrt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Waypoint::clear_needrrt() {
  needrrt_ = true;
  clear_has_needrrt();
}
inline bool Waypoint::needrrt() const {
  // @@protoc_insertion_point(field_get:Waypoint.needRRT)
  return needrrt_;
}
inline void Waypoint::set_needrrt(bool value) {
  set_has_needrrt();
  needrrt_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.needRRT)
}

// required float speed = 5 [default = 100];
inline bool Waypoint::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Waypoint::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Waypoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Waypoint::clear_speed() {
  speed_ = 100;
  clear_has_speed();
}
inline float Waypoint::speed() const {
  // @@protoc_insertion_point(field_get:Waypoint.speed)
  return speed_;
}
inline void Waypoint::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.speed)
}

// required .Waypoint.VelProfile profile = 6 [default = MAMOOLI];
inline bool Waypoint::has_profile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Waypoint::set_has_profile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Waypoint::clear_has_profile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Waypoint::clear_profile() {
  profile_ = 1;
  clear_has_profile();
}
inline ::Waypoint_VelProfile Waypoint::profile() const {
  // @@protoc_insertion_point(field_get:Waypoint.profile)
  return static_cast< ::Waypoint_VelProfile >(profile_);
}
inline void Waypoint::set_profile(::Waypoint_VelProfile value) {
  assert(::Waypoint_VelProfile_IsValid(value));
  set_has_profile();
  profile_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.profile)
}

// optional float tolerance = 7 [default = 100];
inline bool Waypoint::has_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Waypoint::set_has_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Waypoint::clear_has_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Waypoint::clear_tolerance() {
  tolerance_ = 100;
  clear_has_tolerance();
}
inline float Waypoint::tolerance() const {
  // @@protoc_insertion_point(field_get:Waypoint.tolerance)
  return tolerance_;
}
inline void Waypoint::set_tolerance(float value) {
  set_has_tolerance();
  tolerance_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.tolerance)
}

// optional float time = 8;
inline bool Waypoint::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Waypoint::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Waypoint::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Waypoint::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float Waypoint::time() const {
  // @@protoc_insertion_point(field_get:Waypoint.time)
  return time_;
}
inline void Waypoint::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Waypoint.time)
}

// -------------------------------------------------------------------

// Role

// required int32 id = 1;
inline bool Role::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Role::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Role::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Role::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Role::id() const {
  // @@protoc_insertion_point(field_get:Role.id)
  return id_;
}
inline void Role::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Role.id)
}

// optional string name = 2 [default = "NAN"];
inline bool Role::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Role::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Role::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Role::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:Role.name)
  return *name_;
}
inline void Role::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Role.name)
}
inline void Role::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Role.name)
}
inline ::std::string* Role::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:Role.name)
  return name_;
}
inline ::std::string* Role::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:Role.name)
}

// repeated .Waypoint path = 3;
inline int Role::path_size() const {
  return path_.size();
}
inline void Role::clear_path() {
  path_.Clear();
}
inline const ::Waypoint& Role::path(int index) const {
  // @@protoc_insertion_point(field_get:Role.path)
  return path_.Get(index);
}
inline ::Waypoint* Role::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:Role.path)
  return path_.Mutable(index);
}
inline ::Waypoint* Role::add_path() {
  // @@protoc_insertion_point(field_add:Role.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Waypoint >&
Role::path() const {
  // @@protoc_insertion_point(field_list:Role.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::Waypoint >*
Role::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:Role.path)
  return &path_;
}

// required int32 afterlife = 4;
inline bool Role::has_afterlife() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Role::set_has_afterlife() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Role::clear_has_afterlife() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Role::clear_afterlife() {
  afterlife_ = 0;
  clear_has_afterlife();
}
inline ::google::protobuf::int32 Role::afterlife() const {
  // @@protoc_insertion_point(field_get:Role.afterlife)
  return afterlife_;
}
inline void Role::set_afterlife(::google::protobuf::int32 value) {
  set_has_afterlife();
  afterlife_ = value;
  // @@protoc_insertion_point(field_set:Role.afterlife)
}

// -------------------------------------------------------------------

// Strategy

// required string name = 1;
inline bool Strategy::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Strategy::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Strategy::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Strategy::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Strategy::name() const {
  // @@protoc_insertion_point(field_get:Strategy.name)
  return *name_;
}
inline void Strategy::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Strategy.name)
}
inline void Strategy::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Strategy.name)
}
inline void Strategy::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Strategy.name)
}
inline ::std::string* Strategy::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Strategy.name)
  return name_;
}
inline ::std::string* Strategy::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Strategy::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Strategy.name)
}

// repeated .Role role = 2;
inline int Strategy::role_size() const {
  return role_.size();
}
inline void Strategy::clear_role() {
  role_.Clear();
}
inline const ::Role& Strategy::role(int index) const {
  // @@protoc_insertion_point(field_get:Strategy.role)
  return role_.Get(index);
}
inline ::Role* Strategy::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Strategy.role)
  return role_.Mutable(index);
}
inline ::Role* Strategy::add_role() {
  // @@protoc_insertion_point(field_add:Strategy.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role >&
Strategy::role() const {
  // @@protoc_insertion_point(field_list:Strategy.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role >*
Strategy::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Strategy.role)
  return &role_;
}

// repeated .SyncData sync = 3;
inline int Strategy::sync_size() const {
  return sync_.size();
}
inline void Strategy::clear_sync() {
  sync_.Clear();
}
inline const ::SyncData& Strategy::sync(int index) const {
  // @@protoc_insertion_point(field_get:Strategy.sync)
  return sync_.Get(index);
}
inline ::SyncData* Strategy::mutable_sync(int index) {
  // @@protoc_insertion_point(field_mutable:Strategy.sync)
  return sync_.Mutable(index);
}
inline ::SyncData* Strategy::add_sync() {
  // @@protoc_insertion_point(field_add:Strategy.sync)
  return sync_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SyncData >&
Strategy::sync() const {
  // @@protoc_insertion_point(field_list:Strategy.sync)
  return sync_;
}
inline ::google::protobuf::RepeatedPtrField< ::SyncData >*
Strategy::mutable_sync() {
  // @@protoc_insertion_point(field_mutable_list:Strategy.sync)
  return &sync_;
}

// required float minX = 4;
inline bool Strategy::has_minx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Strategy::set_has_minx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Strategy::clear_has_minx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Strategy::clear_minx() {
  minx_ = 0;
  clear_has_minx();
}
inline float Strategy::minx() const {
  // @@protoc_insertion_point(field_get:Strategy.minX)
  return minx_;
}
inline void Strategy::set_minx(float value) {
  set_has_minx();
  minx_ = value;
  // @@protoc_insertion_point(field_set:Strategy.minX)
}

// required float maxX = 5;
inline bool Strategy::has_maxx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Strategy::set_has_maxx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Strategy::clear_has_maxx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Strategy::clear_maxx() {
  maxx_ = 0;
  clear_has_maxx();
}
inline float Strategy::maxx() const {
  // @@protoc_insertion_point(field_get:Strategy.maxX)
  return maxx_;
}
inline void Strategy::set_maxx(float value) {
  set_has_maxx();
  maxx_ = value;
  // @@protoc_insertion_point(field_set:Strategy.maxX)
}

// required float minY = 6;
inline bool Strategy::has_miny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Strategy::set_has_miny() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Strategy::clear_has_miny() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Strategy::clear_miny() {
  miny_ = 0;
  clear_has_miny();
}
inline float Strategy::miny() const {
  // @@protoc_insertion_point(field_get:Strategy.minY)
  return miny_;
}
inline void Strategy::set_miny(float value) {
  set_has_miny();
  miny_ = value;
  // @@protoc_insertion_point(field_set:Strategy.minY)
}

// required float maxY = 7;
inline bool Strategy::has_maxy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Strategy::set_has_maxy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Strategy::clear_has_maxy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Strategy::clear_maxy() {
  maxy_ = 0;
  clear_has_maxy();
}
inline float Strategy::maxy() const {
  // @@protoc_insertion_point(field_get:Strategy.maxY)
  return maxy_;
}
inline void Strategy::set_maxy(float value) {
  set_has_maxy();
  maxy_ = value;
  // @@protoc_insertion_point(field_set:Strategy.maxY)
}

// -------------------------------------------------------------------

// PlayBook

// repeated .Strategy strategy = 1;
inline int PlayBook::strategy_size() const {
  return strategy_.size();
}
inline void PlayBook::clear_strategy() {
  strategy_.Clear();
}
inline const ::Strategy& PlayBook::strategy(int index) const {
  // @@protoc_insertion_point(field_get:PlayBook.strategy)
  return strategy_.Get(index);
}
inline ::Strategy* PlayBook::mutable_strategy(int index) {
  // @@protoc_insertion_point(field_mutable:PlayBook.strategy)
  return strategy_.Mutable(index);
}
inline ::Strategy* PlayBook::add_strategy() {
  // @@protoc_insertion_point(field_add:PlayBook.strategy)
  return strategy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Strategy >&
PlayBook::strategy() const {
  // @@protoc_insertion_point(field_list:PlayBook.strategy)
  return strategy_;
}
inline ::google::protobuf::RepeatedPtrField< ::Strategy >*
PlayBook::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable_list:PlayBook.strategy)
  return &strategy_;
}

// repeated float weight = 2;
inline int PlayBook::weight_size() const {
  return weight_.size();
}
inline void PlayBook::clear_weight() {
  weight_.Clear();
}
inline float PlayBook::weight(int index) const {
  // @@protoc_insertion_point(field_get:PlayBook.weight)
  return weight_.Get(index);
}
inline void PlayBook::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayBook.weight)
}
inline void PlayBook::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:PlayBook.weight)
}
inline const ::google::protobuf::RepeatedField< float >&
PlayBook::weight() const {
  // @@protoc_insertion_point(field_list:PlayBook.weight)
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
PlayBook::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:PlayBook.weight)
  return &weight_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Waypoint_WayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Waypoint_WayType>() {
  return ::Waypoint_WayType_descriptor();
}
template <> struct is_proto_enum< ::Waypoint_VelProfile> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Waypoint_VelProfile>() {
  return ::Waypoint_VelProfile_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_strategy_2eproto__INCLUDED
