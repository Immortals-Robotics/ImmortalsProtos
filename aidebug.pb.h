// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aidebug.proto

#ifndef PROTOBUF_aidebug_2eproto__INCLUDED
#define PROTOBUF_aidebug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aidebug_2eproto();
void protobuf_AssignDesc_aidebug_2eproto();
void protobuf_ShutdownFile_aidebug_2eproto();

class color;
class Debug_Point;
class Debug_Line;
class Debug_Rect;
class Debug_Circle;
class Data_Node;
class Debug_Draw;
class Function_Data;
class AI_Debug;

enum Data_Type {
  imm_bool = 0,
  imm_short = 1,
  imm_int = 2,
  imm_float = 3,
  imm_double = 4,
  imm_vec2 = 5,
  imm_vec3 = 6,
  imm_str = 7
};
bool Data_Type_IsValid(int value);
const Data_Type Data_Type_MIN = imm_bool;
const Data_Type Data_Type_MAX = imm_str;
const int Data_Type_ARRAYSIZE = Data_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor();
inline const ::std::string& Data_Type_Name(Data_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_Type_descriptor(), value);
}
inline bool Data_Type_Parse(
    const ::std::string& name, Data_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_Type>(
    Data_Type_descriptor(), name, value);
}
// ===================================================================

class color : public ::google::protobuf::Message {
 public:
  color();
  virtual ~color();

  color(const color& from);

  inline color& operator=(const color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const color& default_instance();

  void Swap(color* other);

  // implements Message ----------------------------------------------

  color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const color& from);
  void MergeFrom(const color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline float r() const;
  inline void set_r(float value);

  // required float g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline float g() const;
  inline void set_g(float value);

  // required float b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline float b() const;
  inline void set_b(float value);

  // @@protoc_insertion_point(class_scope:color)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float r_;
  float g_;
  float b_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static color* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Point : public ::google::protobuf::Message {
 public:
  Debug_Point();
  virtual ~Debug_Point();

  Debug_Point(const Debug_Point& from);

  inline Debug_Point& operator=(const Debug_Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Point& default_instance();

  void Swap(Debug_Point* other);

  // implements Message ----------------------------------------------

  Debug_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Point& from);
  void MergeFrom(const Debug_Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional .color col = 3;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 3;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  inline void set_allocated_col(::color* col);

  // @@protoc_insertion_point(class_scope:Debug_Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_col();
  inline void clear_has_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::color* col_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Debug_Point* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Line : public ::google::protobuf::Message {
 public:
  Debug_Line();
  virtual ~Debug_Line();

  Debug_Line(const Debug_Line& from);

  inline Debug_Line& operator=(const Debug_Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Line& default_instance();

  void Swap(Debug_Line* other);

  // implements Message ----------------------------------------------

  Debug_Line* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Line& from);
  void MergeFrom(const Debug_Line& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x1 = 1;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 1;
  inline float x1() const;
  inline void set_x1(float value);

  // required float y1 = 2;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 2;
  inline float y1() const;
  inline void set_y1(float value);

  // required float x2 = 3;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 3;
  inline float x2() const;
  inline void set_x2(float value);

  // required float y2 = 4;
  inline bool has_y2() const;
  inline void clear_y2();
  static const int kY2FieldNumber = 4;
  inline float y2() const;
  inline void set_y2(float value);

  // optional .color col = 5;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 5;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  inline void set_allocated_col(::color* col);

  // @@protoc_insertion_point(class_scope:Debug_Line)
 private:
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_y2();
  inline void clear_has_y2();
  inline void set_has_col();
  inline void clear_has_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x1_;
  float y1_;
  float x2_;
  float y2_;
  ::color* col_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Debug_Line* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Rect : public ::google::protobuf::Message {
 public:
  Debug_Rect();
  virtual ~Debug_Rect();

  Debug_Rect(const Debug_Rect& from);

  inline Debug_Rect& operator=(const Debug_Rect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Rect& default_instance();

  void Swap(Debug_Rect* other);

  // implements Message ----------------------------------------------

  Debug_Rect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Rect& from);
  void MergeFrom(const Debug_Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float w = 3;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 3;
  inline float w() const;
  inline void set_w(float value);

  // required float h = 4;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 4;
  inline float h() const;
  inline void set_h(float value);

  // optional .color col = 5;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 5;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  inline void set_allocated_col(::color* col);

  // @@protoc_insertion_point(class_scope:Debug_Rect)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_col();
  inline void clear_has_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float w_;
  float h_;
  ::color* col_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Debug_Rect* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Circle : public ::google::protobuf::Message {
 public:
  Debug_Circle();
  virtual ~Debug_Circle();

  Debug_Circle(const Debug_Circle& from);

  inline Debug_Circle& operator=(const Debug_Circle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Circle& default_instance();

  void Swap(Debug_Circle* other);

  // implements Message ----------------------------------------------

  Debug_Circle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Circle& from);
  void MergeFrom(const Debug_Circle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float r = 3;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 3;
  inline float r() const;
  inline void set_r(float value);

  // optional .color col = 4;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 4;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  inline void set_allocated_col(::color* col);

  // @@protoc_insertion_point(class_scope:Debug_Circle)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_col();
  inline void clear_has_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::color* col_;
  float r_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Debug_Circle* default_instance_;
};
// -------------------------------------------------------------------

class Data_Node : public ::google::protobuf::Message {
 public:
  Data_Node();
  virtual ~Data_Node();

  Data_Node(const Data_Node& from);

  inline Data_Node& operator=(const Data_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_Node& default_instance();

  void Swap(Data_Node* other);

  // implements Message ----------------------------------------------

  Data_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data_Node& from);
  void MergeFrom(const Data_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .Data_Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Data_Type type() const;
  inline void set_type(::Data_Type value);

  // required string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string hint = 4;
  inline bool has_hint() const;
  inline void clear_hint();
  static const int kHintFieldNumber = 4;
  inline const ::std::string& hint() const;
  inline void set_hint(const ::std::string& value);
  inline void set_hint(const char* value);
  inline void set_hint(const char* value, size_t size);
  inline ::std::string* mutable_hint();
  inline ::std::string* release_hint();
  inline void set_allocated_hint(::std::string* hint);

  // @@protoc_insertion_point(class_scope:Data_Node)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_hint();
  inline void clear_has_hint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* data_;
  ::std::string* hint_;
  int type_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Data_Node* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Draw : public ::google::protobuf::Message {
 public:
  Debug_Draw();
  virtual ~Debug_Draw();

  Debug_Draw(const Debug_Draw& from);

  inline Debug_Draw& operator=(const Debug_Draw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Draw& default_instance();

  void Swap(Debug_Draw* other);

  // implements Message ----------------------------------------------

  Debug_Draw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Draw& from);
  void MergeFrom(const Debug_Draw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Debug_Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::Debug_Point& point(int index) const;
  inline ::Debug_Point* mutable_point(int index);
  inline ::Debug_Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
      mutable_point();

  // repeated .Debug_Line line = 2;
  inline int line_size() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline const ::Debug_Line& line(int index) const;
  inline ::Debug_Line* mutable_line(int index);
  inline ::Debug_Line* add_line();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
      line() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
      mutable_line();

  // repeated .Debug_Rect rect = 3;
  inline int rect_size() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 3;
  inline const ::Debug_Rect& rect(int index) const;
  inline ::Debug_Rect* mutable_rect(int index);
  inline ::Debug_Rect* add_rect();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
      rect() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
      mutable_rect();

  // repeated .Debug_Circle circle = 4;
  inline int circle_size() const;
  inline void clear_circle();
  static const int kCircleFieldNumber = 4;
  inline const ::Debug_Circle& circle(int index) const;
  inline ::Debug_Circle* mutable_circle(int index);
  inline ::Debug_Circle* add_circle();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
      circle() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
      mutable_circle();

  // @@protoc_insertion_point(class_scope:Debug_Draw)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Point > point_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Line > line_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Rect > rect_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Circle > circle_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Debug_Draw* default_instance_;
};
// -------------------------------------------------------------------

class Function_Data : public ::google::protobuf::Message {
 public:
  Function_Data();
  virtual ~Function_Data();

  Function_Data(const Function_Data& from);

  inline Function_Data& operator=(const Function_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function_Data& default_instance();

  void Swap(Function_Data* other);

  // implements Message ----------------------------------------------

  Function_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function_Data& from);
  void MergeFrom(const Function_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string category = 2 [default = "Uncategorised"];
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 2;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  inline void set_allocated_category(::std::string* category);

  // optional string hint = 3;
  inline bool has_hint() const;
  inline void clear_hint();
  static const int kHintFieldNumber = 3;
  inline const ::std::string& hint() const;
  inline void set_hint(const ::std::string& value);
  inline void set_hint(const char* value);
  inline void set_hint(const char* value, size_t size);
  inline ::std::string* mutable_hint();
  inline ::std::string* release_hint();
  inline void set_allocated_hint(::std::string* hint);

  // repeated .Data_Node In_Data = 4;
  inline int in_data_size() const;
  inline void clear_in_data();
  static const int kInDataFieldNumber = 4;
  inline const ::Data_Node& in_data(int index) const;
  inline ::Data_Node* mutable_in_data(int index);
  inline ::Data_Node* add_in_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
      in_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
      mutable_in_data();

  // repeated .Data_Node Out_Data = 5;
  inline int out_data_size() const;
  inline void clear_out_data();
  static const int kOutDataFieldNumber = 5;
  inline const ::Data_Node& out_data(int index) const;
  inline ::Data_Node* mutable_out_data(int index);
  inline ::Data_Node* add_out_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
      out_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
      mutable_out_data();

  // repeated .Data_Node Internal_Var = 6;
  inline int internal_var_size() const;
  inline void clear_internal_var();
  static const int kInternalVarFieldNumber = 6;
  inline const ::Data_Node& internal_var(int index) const;
  inline ::Data_Node* mutable_internal_var(int index);
  inline ::Data_Node* add_internal_var();
  inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
      internal_var() const;
  inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
      mutable_internal_var();

  // required .Debug_Draw draw_data = 7;
  inline bool has_draw_data() const;
  inline void clear_draw_data();
  static const int kDrawDataFieldNumber = 7;
  inline const ::Debug_Draw& draw_data() const;
  inline ::Debug_Draw* mutable_draw_data();
  inline ::Debug_Draw* release_draw_data();
  inline void set_allocated_draw_data(::Debug_Draw* draw_data);

  // @@protoc_insertion_point(class_scope:Function_Data)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_hint();
  inline void clear_has_hint();
  inline void set_has_draw_data();
  inline void clear_has_draw_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  static ::std::string* _default_category_;
  ::std::string* category_;
  ::std::string* hint_;
  ::google::protobuf::RepeatedPtrField< ::Data_Node > in_data_;
  ::google::protobuf::RepeatedPtrField< ::Data_Node > out_data_;
  ::google::protobuf::RepeatedPtrField< ::Data_Node > internal_var_;
  ::Debug_Draw* draw_data_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static Function_Data* default_instance_;
};
// -------------------------------------------------------------------

class AI_Debug : public ::google::protobuf::Message {
 public:
  AI_Debug();
  virtual ~AI_Debug();

  AI_Debug(const AI_Debug& from);

  inline AI_Debug& operator=(const AI_Debug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AI_Debug& default_instance();

  void Swap(AI_Debug* other);

  // implements Message ----------------------------------------------

  AI_Debug* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AI_Debug& from);
  void MergeFrom(const AI_Debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 frame_id() const;
  inline void set_frame_id(::google::protobuf::uint32 value);

  // repeated .Function_Data func = 2;
  inline int func_size() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 2;
  inline const ::Function_Data& func(int index) const;
  inline ::Function_Data* mutable_func(int index);
  inline ::Function_Data* add_func();
  inline const ::google::protobuf::RepeatedPtrField< ::Function_Data >&
      func() const;
  inline ::google::protobuf::RepeatedPtrField< ::Function_Data >*
      mutable_func();

  // repeated .Debug_Point point = 3;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 3;
  inline const ::Debug_Point& point(int index) const;
  inline ::Debug_Point* mutable_point(int index);
  inline ::Debug_Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
      mutable_point();

  // repeated .Debug_Line line = 4;
  inline int line_size() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline const ::Debug_Line& line(int index) const;
  inline ::Debug_Line* mutable_line(int index);
  inline ::Debug_Line* add_line();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
      line() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
      mutable_line();

  // repeated .Debug_Rect rect = 5;
  inline int rect_size() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 5;
  inline const ::Debug_Rect& rect(int index) const;
  inline ::Debug_Rect* mutable_rect(int index);
  inline ::Debug_Rect* add_rect();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
      rect() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
      mutable_rect();

  // repeated .Debug_Circle circle = 6;
  inline int circle_size() const;
  inline void clear_circle();
  static const int kCircleFieldNumber = 6;
  inline const ::Debug_Circle& circle(int index) const;
  inline ::Debug_Circle* mutable_circle(int index);
  inline ::Debug_Circle* add_circle();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
      circle() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
      mutable_circle();

  // @@protoc_insertion_point(class_scope:AI_Debug)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Function_Data > func_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Point > point_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Line > line_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Rect > rect_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Circle > circle_;
  ::google::protobuf::uint32 frame_id_;
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();

  void InitAsDefaultInstance();
  static AI_Debug* default_instance_;
};
// ===================================================================


// ===================================================================

// color

// required float r = 1;
inline bool color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float color::r() const {
  // @@protoc_insertion_point(field_get:color.r)
  return r_;
}
inline void color::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:color.r)
}

// required float g = 2;
inline bool color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float color::g() const {
  // @@protoc_insertion_point(field_get:color.g)
  return g_;
}
inline void color::set_g(float value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:color.g)
}

// required float b = 3;
inline bool color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float color::b() const {
  // @@protoc_insertion_point(field_get:color.b)
  return b_;
}
inline void color::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:color.b)
}

// -------------------------------------------------------------------

// Debug_Point

// required float x = 1;
inline bool Debug_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Point::x() const {
  // @@protoc_insertion_point(field_get:Debug_Point.x)
  return x_;
}
inline void Debug_Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_Point.x)
}

// required float y = 2;
inline bool Debug_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Point::y() const {
  // @@protoc_insertion_point(field_get:Debug_Point.y)
  return y_;
}
inline void Debug_Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_Point.y)
}

// optional .color col = 3;
inline bool Debug_Point::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Point::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Point::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Point::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Point::col() const {
  // @@protoc_insertion_point(field_get:Debug_Point.col)
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Point::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  // @@protoc_insertion_point(field_mutable:Debug_Point.col)
  return col_;
}
inline ::color* Debug_Point::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}
inline void Debug_Point::set_allocated_col(::color* col) {
  delete col_;
  col_ = col;
  if (col) {
    set_has_col();
  } else {
    clear_has_col();
  }
  // @@protoc_insertion_point(field_set_allocated:Debug_Point.col)
}

// -------------------------------------------------------------------

// Debug_Line

// required float x1 = 1;
inline bool Debug_Line::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Line::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Line::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Line::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline float Debug_Line::x1() const {
  // @@protoc_insertion_point(field_get:Debug_Line.x1)
  return x1_;
}
inline void Debug_Line::set_x1(float value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.x1)
}

// required float y1 = 2;
inline bool Debug_Line::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Line::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Line::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Line::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline float Debug_Line::y1() const {
  // @@protoc_insertion_point(field_get:Debug_Line.y1)
  return y1_;
}
inline void Debug_Line::set_y1(float value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.y1)
}

// required float x2 = 3;
inline bool Debug_Line::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Line::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Line::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Line::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline float Debug_Line::x2() const {
  // @@protoc_insertion_point(field_get:Debug_Line.x2)
  return x2_;
}
inline void Debug_Line::set_x2(float value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.x2)
}

// required float y2 = 4;
inline bool Debug_Line::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Line::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Line::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Line::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
inline float Debug_Line::y2() const {
  // @@protoc_insertion_point(field_get:Debug_Line.y2)
  return y2_;
}
inline void Debug_Line::set_y2(float value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.y2)
}

// optional .color col = 5;
inline bool Debug_Line::has_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug_Line::set_has_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Debug_Line::clear_has_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Debug_Line::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Line::col() const {
  // @@protoc_insertion_point(field_get:Debug_Line.col)
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Line::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  // @@protoc_insertion_point(field_mutable:Debug_Line.col)
  return col_;
}
inline ::color* Debug_Line::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}
inline void Debug_Line::set_allocated_col(::color* col) {
  delete col_;
  col_ = col;
  if (col) {
    set_has_col();
  } else {
    clear_has_col();
  }
  // @@protoc_insertion_point(field_set_allocated:Debug_Line.col)
}

// -------------------------------------------------------------------

// Debug_Rect

// required float x = 1;
inline bool Debug_Rect::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Rect::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Rect::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Rect::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Rect::x() const {
  // @@protoc_insertion_point(field_get:Debug_Rect.x)
  return x_;
}
inline void Debug_Rect::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_Rect.x)
}

// required float y = 2;
inline bool Debug_Rect::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Rect::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Rect::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Rect::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Rect::y() const {
  // @@protoc_insertion_point(field_get:Debug_Rect.y)
  return y_;
}
inline void Debug_Rect::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_Rect.y)
}

// required float w = 3;
inline bool Debug_Rect::has_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Rect::set_has_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Rect::clear_has_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Rect::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Debug_Rect::w() const {
  // @@protoc_insertion_point(field_get:Debug_Rect.w)
  return w_;
}
inline void Debug_Rect::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Debug_Rect.w)
}

// required float h = 4;
inline bool Debug_Rect::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Rect::set_has_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Rect::clear_has_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Rect::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float Debug_Rect::h() const {
  // @@protoc_insertion_point(field_get:Debug_Rect.h)
  return h_;
}
inline void Debug_Rect::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:Debug_Rect.h)
}

// optional .color col = 5;
inline bool Debug_Rect::has_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug_Rect::set_has_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Debug_Rect::clear_has_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Debug_Rect::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Rect::col() const {
  // @@protoc_insertion_point(field_get:Debug_Rect.col)
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Rect::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  // @@protoc_insertion_point(field_mutable:Debug_Rect.col)
  return col_;
}
inline ::color* Debug_Rect::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}
inline void Debug_Rect::set_allocated_col(::color* col) {
  delete col_;
  col_ = col;
  if (col) {
    set_has_col();
  } else {
    clear_has_col();
  }
  // @@protoc_insertion_point(field_set_allocated:Debug_Rect.col)
}

// -------------------------------------------------------------------

// Debug_Circle

// required float x = 1;
inline bool Debug_Circle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Circle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Circle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Circle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Circle::x() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.x)
  return x_;
}
inline void Debug_Circle::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.x)
}

// required float y = 2;
inline bool Debug_Circle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Circle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Circle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Circle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Circle::y() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.y)
  return y_;
}
inline void Debug_Circle::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.y)
}

// required float r = 3;
inline bool Debug_Circle::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Circle::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Circle::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Circle::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float Debug_Circle::r() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.r)
  return r_;
}
inline void Debug_Circle::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.r)
}

// optional .color col = 4;
inline bool Debug_Circle::has_col() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Circle::set_has_col() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Circle::clear_has_col() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Circle::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Circle::col() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.col)
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Circle::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  // @@protoc_insertion_point(field_mutable:Debug_Circle.col)
  return col_;
}
inline ::color* Debug_Circle::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}
inline void Debug_Circle::set_allocated_col(::color* col) {
  delete col_;
  col_ = col;
  if (col) {
    set_has_col();
  } else {
    clear_has_col();
  }
  // @@protoc_insertion_point(field_set_allocated:Debug_Circle.col)
}

// -------------------------------------------------------------------

// Data_Node

// required string name = 1;
inline bool Data_Node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data_Node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data_Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data_Node::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Data_Node::name() const {
  // @@protoc_insertion_point(field_get:Data_Node.name)
  return *name_;
}
inline void Data_Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Data_Node.name)
}
inline void Data_Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data_Node.name)
}
inline void Data_Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data_Node.name)
}
inline ::std::string* Data_Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data_Node.name)
  return name_;
}
inline ::std::string* Data_Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data_Node.name)
}

// required .Data_Type type = 2;
inline bool Data_Node::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data_Node::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data_Node::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data_Node::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Data_Type Data_Node::type() const {
  // @@protoc_insertion_point(field_get:Data_Node.type)
  return static_cast< ::Data_Type >(type_);
}
inline void Data_Node::set_type(::Data_Type value) {
  assert(::Data_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Data_Node.type)
}

// required string data = 3;
inline bool Data_Node::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data_Node::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data_Node::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data_Node::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Data_Node::data() const {
  // @@protoc_insertion_point(field_get:Data_Node.data)
  return *data_;
}
inline void Data_Node::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Data_Node.data)
}
inline void Data_Node::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data_Node.data)
}
inline void Data_Node::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data_Node.data)
}
inline ::std::string* Data_Node::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data_Node.data)
  return data_;
}
inline ::std::string* Data_Node::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Node::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data_Node.data)
}

// optional string hint = 4;
inline bool Data_Node::has_hint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data_Node::set_has_hint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data_Node::clear_has_hint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data_Node::clear_hint() {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_->clear();
  }
  clear_has_hint();
}
inline const ::std::string& Data_Node::hint() const {
  // @@protoc_insertion_point(field_get:Data_Node.hint)
  return *hint_;
}
inline void Data_Node::set_hint(const ::std::string& value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set:Data_Node.hint)
}
inline void Data_Node::set_hint(const char* value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data_Node.hint)
}
inline void Data_Node::set_hint(const char* value, size_t size) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data_Node.hint)
}
inline ::std::string* Data_Node::mutable_hint() {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data_Node.hint)
  return hint_;
}
inline ::std::string* Data_Node::release_hint() {
  clear_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hint_;
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Node::set_allocated_hint(::std::string* hint) {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  if (hint) {
    set_has_hint();
    hint_ = hint;
  } else {
    clear_has_hint();
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data_Node.hint)
}

// -------------------------------------------------------------------

// Debug_Draw

// repeated .Debug_Point point = 1;
inline int Debug_Draw::point_size() const {
  return point_.size();
}
inline void Debug_Draw::clear_point() {
  point_.Clear();
}
inline const ::Debug_Point& Debug_Draw::point(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Draw.point)
  return point_.Get(index);
}
inline ::Debug_Point* Debug_Draw::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Draw.point)
  return point_.Mutable(index);
}
inline ::Debug_Point* Debug_Draw::add_point() {
  // @@protoc_insertion_point(field_add:Debug_Draw.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
Debug_Draw::point() const {
  // @@protoc_insertion_point(field_list:Debug_Draw.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
Debug_Draw::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Draw.point)
  return &point_;
}

// repeated .Debug_Line line = 2;
inline int Debug_Draw::line_size() const {
  return line_.size();
}
inline void Debug_Draw::clear_line() {
  line_.Clear();
}
inline const ::Debug_Line& Debug_Draw::line(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Draw.line)
  return line_.Get(index);
}
inline ::Debug_Line* Debug_Draw::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Draw.line)
  return line_.Mutable(index);
}
inline ::Debug_Line* Debug_Draw::add_line() {
  // @@protoc_insertion_point(field_add:Debug_Draw.line)
  return line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
Debug_Draw::line() const {
  // @@protoc_insertion_point(field_list:Debug_Draw.line)
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
Debug_Draw::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Draw.line)
  return &line_;
}

// repeated .Debug_Rect rect = 3;
inline int Debug_Draw::rect_size() const {
  return rect_.size();
}
inline void Debug_Draw::clear_rect() {
  rect_.Clear();
}
inline const ::Debug_Rect& Debug_Draw::rect(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Draw.rect)
  return rect_.Get(index);
}
inline ::Debug_Rect* Debug_Draw::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Draw.rect)
  return rect_.Mutable(index);
}
inline ::Debug_Rect* Debug_Draw::add_rect() {
  // @@protoc_insertion_point(field_add:Debug_Draw.rect)
  return rect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
Debug_Draw::rect() const {
  // @@protoc_insertion_point(field_list:Debug_Draw.rect)
  return rect_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
Debug_Draw::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Draw.rect)
  return &rect_;
}

// repeated .Debug_Circle circle = 4;
inline int Debug_Draw::circle_size() const {
  return circle_.size();
}
inline void Debug_Draw::clear_circle() {
  circle_.Clear();
}
inline const ::Debug_Circle& Debug_Draw::circle(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Draw.circle)
  return circle_.Get(index);
}
inline ::Debug_Circle* Debug_Draw::mutable_circle(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Draw.circle)
  return circle_.Mutable(index);
}
inline ::Debug_Circle* Debug_Draw::add_circle() {
  // @@protoc_insertion_point(field_add:Debug_Draw.circle)
  return circle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
Debug_Draw::circle() const {
  // @@protoc_insertion_point(field_list:Debug_Draw.circle)
  return circle_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
Debug_Draw::mutable_circle() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Draw.circle)
  return &circle_;
}

// -------------------------------------------------------------------

// Function_Data

// required string name = 1;
inline bool Function_Data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Function_Data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Function_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Function_Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Function_Data::name() const {
  // @@protoc_insertion_point(field_get:Function_Data.name)
  return *name_;
}
inline void Function_Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Function_Data.name)
}
inline void Function_Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Function_Data.name)
}
inline void Function_Data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Function_Data.name)
}
inline ::std::string* Function_Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Function_Data.name)
  return name_;
}
inline ::std::string* Function_Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Function_Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Function_Data.name)
}

// optional string category = 2 [default = "Uncategorised"];
inline bool Function_Data::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function_Data::set_has_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function_Data::clear_has_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function_Data::clear_category() {
  if (category_ != _default_category_) {
    category_->assign(*_default_category_);
  }
  clear_has_category();
}
inline const ::std::string& Function_Data::category() const {
  // @@protoc_insertion_point(field_get:Function_Data.category)
  return *category_;
}
inline void Function_Data::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == _default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set:Function_Data.category)
}
inline void Function_Data::set_category(const char* value) {
  set_has_category();
  if (category_ == _default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set_char:Function_Data.category)
}
inline void Function_Data::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == _default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Function_Data.category)
}
inline ::std::string* Function_Data::mutable_category() {
  set_has_category();
  if (category_ == _default_category_) {
    category_ = new ::std::string(*_default_category_);
  }
  // @@protoc_insertion_point(field_mutable:Function_Data.category)
  return category_;
}
inline ::std::string* Function_Data::release_category() {
  clear_has_category();
  if (category_ == _default_category_) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(_default_category_);
    return temp;
  }
}
inline void Function_Data::set_allocated_category(::std::string* category) {
  if (category_ != _default_category_) {
    delete category_;
  }
  if (category) {
    set_has_category();
    category_ = category;
  } else {
    clear_has_category();
    category_ = const_cast< ::std::string*>(_default_category_);
  }
  // @@protoc_insertion_point(field_set_allocated:Function_Data.category)
}

// optional string hint = 3;
inline bool Function_Data::has_hint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Function_Data::set_has_hint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Function_Data::clear_has_hint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Function_Data::clear_hint() {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_->clear();
  }
  clear_has_hint();
}
inline const ::std::string& Function_Data::hint() const {
  // @@protoc_insertion_point(field_get:Function_Data.hint)
  return *hint_;
}
inline void Function_Data::set_hint(const ::std::string& value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set:Function_Data.hint)
}
inline void Function_Data::set_hint(const char* value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Function_Data.hint)
}
inline void Function_Data::set_hint(const char* value, size_t size) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Function_Data.hint)
}
inline ::std::string* Function_Data::mutable_hint() {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Function_Data.hint)
  return hint_;
}
inline ::std::string* Function_Data::release_hint() {
  clear_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hint_;
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Function_Data::set_allocated_hint(::std::string* hint) {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  if (hint) {
    set_has_hint();
    hint_ = hint;
  } else {
    clear_has_hint();
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Function_Data.hint)
}

// repeated .Data_Node In_Data = 4;
inline int Function_Data::in_data_size() const {
  return in_data_.size();
}
inline void Function_Data::clear_in_data() {
  in_data_.Clear();
}
inline const ::Data_Node& Function_Data::in_data(int index) const {
  // @@protoc_insertion_point(field_get:Function_Data.In_Data)
  return in_data_.Get(index);
}
inline ::Data_Node* Function_Data::mutable_in_data(int index) {
  // @@protoc_insertion_point(field_mutable:Function_Data.In_Data)
  return in_data_.Mutable(index);
}
inline ::Data_Node* Function_Data::add_in_data() {
  // @@protoc_insertion_point(field_add:Function_Data.In_Data)
  return in_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
Function_Data::in_data() const {
  // @@protoc_insertion_point(field_list:Function_Data.In_Data)
  return in_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
Function_Data::mutable_in_data() {
  // @@protoc_insertion_point(field_mutable_list:Function_Data.In_Data)
  return &in_data_;
}

// repeated .Data_Node Out_Data = 5;
inline int Function_Data::out_data_size() const {
  return out_data_.size();
}
inline void Function_Data::clear_out_data() {
  out_data_.Clear();
}
inline const ::Data_Node& Function_Data::out_data(int index) const {
  // @@protoc_insertion_point(field_get:Function_Data.Out_Data)
  return out_data_.Get(index);
}
inline ::Data_Node* Function_Data::mutable_out_data(int index) {
  // @@protoc_insertion_point(field_mutable:Function_Data.Out_Data)
  return out_data_.Mutable(index);
}
inline ::Data_Node* Function_Data::add_out_data() {
  // @@protoc_insertion_point(field_add:Function_Data.Out_Data)
  return out_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
Function_Data::out_data() const {
  // @@protoc_insertion_point(field_list:Function_Data.Out_Data)
  return out_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
Function_Data::mutable_out_data() {
  // @@protoc_insertion_point(field_mutable_list:Function_Data.Out_Data)
  return &out_data_;
}

// repeated .Data_Node Internal_Var = 6;
inline int Function_Data::internal_var_size() const {
  return internal_var_.size();
}
inline void Function_Data::clear_internal_var() {
  internal_var_.Clear();
}
inline const ::Data_Node& Function_Data::internal_var(int index) const {
  // @@protoc_insertion_point(field_get:Function_Data.Internal_Var)
  return internal_var_.Get(index);
}
inline ::Data_Node* Function_Data::mutable_internal_var(int index) {
  // @@protoc_insertion_point(field_mutable:Function_Data.Internal_Var)
  return internal_var_.Mutable(index);
}
inline ::Data_Node* Function_Data::add_internal_var() {
  // @@protoc_insertion_point(field_add:Function_Data.Internal_Var)
  return internal_var_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Data_Node >&
Function_Data::internal_var() const {
  // @@protoc_insertion_point(field_list:Function_Data.Internal_Var)
  return internal_var_;
}
inline ::google::protobuf::RepeatedPtrField< ::Data_Node >*
Function_Data::mutable_internal_var() {
  // @@protoc_insertion_point(field_mutable_list:Function_Data.Internal_Var)
  return &internal_var_;
}

// required .Debug_Draw draw_data = 7;
inline bool Function_Data::has_draw_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Function_Data::set_has_draw_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Function_Data::clear_has_draw_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Function_Data::clear_draw_data() {
  if (draw_data_ != NULL) draw_data_->::Debug_Draw::Clear();
  clear_has_draw_data();
}
inline const ::Debug_Draw& Function_Data::draw_data() const {
  // @@protoc_insertion_point(field_get:Function_Data.draw_data)
  return draw_data_ != NULL ? *draw_data_ : *default_instance_->draw_data_;
}
inline ::Debug_Draw* Function_Data::mutable_draw_data() {
  set_has_draw_data();
  if (draw_data_ == NULL) draw_data_ = new ::Debug_Draw;
  // @@protoc_insertion_point(field_mutable:Function_Data.draw_data)
  return draw_data_;
}
inline ::Debug_Draw* Function_Data::release_draw_data() {
  clear_has_draw_data();
  ::Debug_Draw* temp = draw_data_;
  draw_data_ = NULL;
  return temp;
}
inline void Function_Data::set_allocated_draw_data(::Debug_Draw* draw_data) {
  delete draw_data_;
  draw_data_ = draw_data;
  if (draw_data) {
    set_has_draw_data();
  } else {
    clear_has_draw_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Function_Data.draw_data)
}

// -------------------------------------------------------------------

// AI_Debug

// required uint32 frame_id = 1;
inline bool AI_Debug::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AI_Debug::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AI_Debug::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AI_Debug::clear_frame_id() {
  frame_id_ = 0u;
  clear_has_frame_id();
}
inline ::google::protobuf::uint32 AI_Debug::frame_id() const {
  // @@protoc_insertion_point(field_get:AI_Debug.frame_id)
  return frame_id_;
}
inline void AI_Debug::set_frame_id(::google::protobuf::uint32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:AI_Debug.frame_id)
}

// repeated .Function_Data func = 2;
inline int AI_Debug::func_size() const {
  return func_.size();
}
inline void AI_Debug::clear_func() {
  func_.Clear();
}
inline const ::Function_Data& AI_Debug::func(int index) const {
  // @@protoc_insertion_point(field_get:AI_Debug.func)
  return func_.Get(index);
}
inline ::Function_Data* AI_Debug::mutable_func(int index) {
  // @@protoc_insertion_point(field_mutable:AI_Debug.func)
  return func_.Mutable(index);
}
inline ::Function_Data* AI_Debug::add_func() {
  // @@protoc_insertion_point(field_add:AI_Debug.func)
  return func_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Function_Data >&
AI_Debug::func() const {
  // @@protoc_insertion_point(field_list:AI_Debug.func)
  return func_;
}
inline ::google::protobuf::RepeatedPtrField< ::Function_Data >*
AI_Debug::mutable_func() {
  // @@protoc_insertion_point(field_mutable_list:AI_Debug.func)
  return &func_;
}

// repeated .Debug_Point point = 3;
inline int AI_Debug::point_size() const {
  return point_.size();
}
inline void AI_Debug::clear_point() {
  point_.Clear();
}
inline const ::Debug_Point& AI_Debug::point(int index) const {
  // @@protoc_insertion_point(field_get:AI_Debug.point)
  return point_.Get(index);
}
inline ::Debug_Point* AI_Debug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:AI_Debug.point)
  return point_.Mutable(index);
}
inline ::Debug_Point* AI_Debug::add_point() {
  // @@protoc_insertion_point(field_add:AI_Debug.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
AI_Debug::point() const {
  // @@protoc_insertion_point(field_list:AI_Debug.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
AI_Debug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:AI_Debug.point)
  return &point_;
}

// repeated .Debug_Line line = 4;
inline int AI_Debug::line_size() const {
  return line_.size();
}
inline void AI_Debug::clear_line() {
  line_.Clear();
}
inline const ::Debug_Line& AI_Debug::line(int index) const {
  // @@protoc_insertion_point(field_get:AI_Debug.line)
  return line_.Get(index);
}
inline ::Debug_Line* AI_Debug::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:AI_Debug.line)
  return line_.Mutable(index);
}
inline ::Debug_Line* AI_Debug::add_line() {
  // @@protoc_insertion_point(field_add:AI_Debug.line)
  return line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
AI_Debug::line() const {
  // @@protoc_insertion_point(field_list:AI_Debug.line)
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
AI_Debug::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:AI_Debug.line)
  return &line_;
}

// repeated .Debug_Rect rect = 5;
inline int AI_Debug::rect_size() const {
  return rect_.size();
}
inline void AI_Debug::clear_rect() {
  rect_.Clear();
}
inline const ::Debug_Rect& AI_Debug::rect(int index) const {
  // @@protoc_insertion_point(field_get:AI_Debug.rect)
  return rect_.Get(index);
}
inline ::Debug_Rect* AI_Debug::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:AI_Debug.rect)
  return rect_.Mutable(index);
}
inline ::Debug_Rect* AI_Debug::add_rect() {
  // @@protoc_insertion_point(field_add:AI_Debug.rect)
  return rect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
AI_Debug::rect() const {
  // @@protoc_insertion_point(field_list:AI_Debug.rect)
  return rect_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
AI_Debug::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:AI_Debug.rect)
  return &rect_;
}

// repeated .Debug_Circle circle = 6;
inline int AI_Debug::circle_size() const {
  return circle_.size();
}
inline void AI_Debug::clear_circle() {
  circle_.Clear();
}
inline const ::Debug_Circle& AI_Debug::circle(int index) const {
  // @@protoc_insertion_point(field_get:AI_Debug.circle)
  return circle_.Get(index);
}
inline ::Debug_Circle* AI_Debug::mutable_circle(int index) {
  // @@protoc_insertion_point(field_mutable:AI_Debug.circle)
  return circle_.Mutable(index);
}
inline ::Debug_Circle* AI_Debug::add_circle() {
  // @@protoc_insertion_point(field_add:AI_Debug.circle)
  return circle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
AI_Debug::circle() const {
  // @@protoc_insertion_point(field_list:AI_Debug.circle)
  return circle_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
AI_Debug::mutable_circle() {
  // @@protoc_insertion_point(field_mutable_list:AI_Debug.circle)
  return &circle_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Data_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Data_Type>() {
  return ::Data_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aidebug_2eproto__INCLUDED
