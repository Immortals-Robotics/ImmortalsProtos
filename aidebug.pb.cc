// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aidebug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aidebug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  color_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Draw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Draw_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* AI_Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AI_Debug_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_aidebug_2eproto() {
  protobuf_AddDesc_aidebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aidebug.proto");
  GOOGLE_CHECK(file != NULL);
  color_descriptor_ = file->message_type(0);
  static const int color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, b_),
  };
  color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      color_descriptor_,
      color::default_instance_,
      color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(color));
  Debug_Point_descriptor_ = file->message_type(1);
  static const int Debug_Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, col_),
  };
  Debug_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Point_descriptor_,
      Debug_Point::default_instance_,
      Debug_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Point));
  Debug_Line_descriptor_ = file->message_type(2);
  static const int Debug_Line_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, col_),
  };
  Debug_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Line_descriptor_,
      Debug_Line::default_instance_,
      Debug_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Line));
  Debug_Rect_descriptor_ = file->message_type(3);
  static const int Debug_Rect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, col_),
  };
  Debug_Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Rect_descriptor_,
      Debug_Rect::default_instance_,
      Debug_Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Rect));
  Debug_Circle_descriptor_ = file->message_type(4);
  static const int Debug_Circle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, col_),
  };
  Debug_Circle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Circle_descriptor_,
      Debug_Circle::default_instance_,
      Debug_Circle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Circle));
  Data_Node_descriptor_ = file->message_type(5);
  static const int Data_Node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, hint_),
  };
  Data_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_Node_descriptor_,
      Data_Node::default_instance_,
      Data_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data_Node));
  Debug_Draw_descriptor_ = file->message_type(6);
  static const int Debug_Draw_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, circle_),
  };
  Debug_Draw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Draw_descriptor_,
      Debug_Draw::default_instance_,
      Debug_Draw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Draw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Draw));
  Function_Data_descriptor_ = file->message_type(7);
  static const int Function_Data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, in_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, out_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, internal_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, draw_data_),
  };
  Function_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_Data_descriptor_,
      Function_Data::default_instance_,
      Function_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function_Data));
  AI_Debug_descriptor_ = file->message_type(8);
  static const int AI_Debug_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, circle_),
  };
  AI_Debug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AI_Debug_descriptor_,
      AI_Debug::default_instance_,
      AI_Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AI_Debug));
  Data_Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aidebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    color_descriptor_, &color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Point_descriptor_, &Debug_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Line_descriptor_, &Debug_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Rect_descriptor_, &Debug_Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Circle_descriptor_, &Debug_Circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_Node_descriptor_, &Data_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Draw_descriptor_, &Debug_Draw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_Data_descriptor_, &Function_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AI_Debug_descriptor_, &AI_Debug::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aidebug_2eproto() {
  delete color::default_instance_;
  delete color_reflection_;
  delete Debug_Point::default_instance_;
  delete Debug_Point_reflection_;
  delete Debug_Line::default_instance_;
  delete Debug_Line_reflection_;
  delete Debug_Rect::default_instance_;
  delete Debug_Rect_reflection_;
  delete Debug_Circle::default_instance_;
  delete Debug_Circle_reflection_;
  delete Data_Node::default_instance_;
  delete Data_Node_reflection_;
  delete Debug_Draw::default_instance_;
  delete Debug_Draw_reflection_;
  delete Function_Data::default_instance_;
  delete Function_Data_reflection_;
  delete Function_Data::_default_category_;
  delete AI_Debug::default_instance_;
  delete AI_Debug_reflection_;
}

void protobuf_AddDesc_aidebug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raidebug.proto\"(\n\005color\022\t\n\001r\030\001 \002(\002\022\t\n\001g"
    "\030\002 \002(\002\022\t\n\001b\030\003 \002(\002\"8\n\013Debug_Point\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\022\023\n\003col\030\003 \001(\0132\006.color\"Q\n\nD"
    "ebug_Line\022\n\n\002x1\030\001 \002(\002\022\n\n\002y1\030\002 \002(\002\022\n\n\002x2\030"
    "\003 \002(\002\022\n\n\002y2\030\004 \002(\002\022\023\n\003col\030\005 \001(\0132\006.color\"M"
    "\n\nDebug_Rect\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001w\030"
    "\003 \002(\002\022\t\n\001h\030\004 \002(\002\022\023\n\003col\030\005 \001(\0132\006.color\"D\n"
    "\014Debug_Circle\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001r"
    "\030\003 \002(\002\022\023\n\003col\030\004 \001(\0132\006.color\"O\n\tData_Node"
    "\022\014\n\004name\030\001 \002(\t\022\030\n\004type\030\002 \002(\0162\n.Data_Type"
    "\022\014\n\004data\030\003 \002(\t\022\014\n\004hint\030\004 \001(\t\"~\n\nDebug_Dr"
    "aw\022\033\n\005point\030\001 \003(\0132\014.Debug_Point\022\031\n\004line\030"
    "\002 \003(\0132\013.Debug_Line\022\031\n\004rect\030\003 \003(\0132\013.Debug"
    "_Rect\022\035\n\006circle\030\004 \003(\0132\r.Debug_Circle\"\311\001\n"
    "\rFunction_Data\022\014\n\004name\030\001 \002(\t\022\037\n\010category"
    "\030\002 \001(\t:\rUncategorised\022\014\n\004hint\030\003 \001(\t\022\033\n\007I"
    "n_Data\030\004 \003(\0132\n.Data_Node\022\034\n\010Out_Data\030\005 \003"
    "(\0132\n.Data_Node\022 \n\014Internal_Var\030\006 \003(\0132\n.D"
    "ata_Node\022\036\n\tdraw_data\030\007 \002(\0132\013.Debug_Draw"
    "\"\254\001\n\010AI_Debug\022\020\n\010frame_id\030\001 \002(\r\022\034\n\004func\030"
    "\002 \003(\0132\016.Function_Data\022\033\n\005point\030\003 \003(\0132\014.D"
    "ebug_Point\022\031\n\004line\030\004 \003(\0132\013.Debug_Line\022\031\n"
    "\004rect\030\005 \003(\0132\013.Debug_Rect\022\035\n\006circle\030\006 \003(\013"
    "2\r.Debug_Circle*}\n\tData_Type\022\014\n\010imm_bool"
    "\020\000\022\r\n\timm_short\020\001\022\013\n\007imm_int\020\002\022\r\n\timm_fl"
    "oat\020\003\022\016\n\nimm_double\020\004\022\014\n\010imm_vec2\020\005\022\014\n\010i"
    "mm_vec3\020\006\022\013\n\007imm_str\020\007", 1062);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aidebug.proto", &protobuf_RegisterTypes);
  color::default_instance_ = new color();
  Debug_Point::default_instance_ = new Debug_Point();
  Debug_Line::default_instance_ = new Debug_Line();
  Debug_Rect::default_instance_ = new Debug_Rect();
  Debug_Circle::default_instance_ = new Debug_Circle();
  Data_Node::default_instance_ = new Data_Node();
  Debug_Draw::default_instance_ = new Debug_Draw();
  Function_Data::_default_category_ =
      new ::std::string("Uncategorised", 13);
  Function_Data::default_instance_ = new Function_Data();
  AI_Debug::default_instance_ = new AI_Debug();
  color::default_instance_->InitAsDefaultInstance();
  Debug_Point::default_instance_->InitAsDefaultInstance();
  Debug_Line::default_instance_->InitAsDefaultInstance();
  Debug_Rect::default_instance_->InitAsDefaultInstance();
  Debug_Circle::default_instance_->InitAsDefaultInstance();
  Data_Node::default_instance_->InitAsDefaultInstance();
  Debug_Draw::default_instance_->InitAsDefaultInstance();
  Function_Data::default_instance_->InitAsDefaultInstance();
  AI_Debug::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aidebug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aidebug_2eproto {
  StaticDescriptorInitializer_aidebug_2eproto() {
    protobuf_AddDesc_aidebug_2eproto();
  }
} static_descriptor_initializer_aidebug_2eproto_;
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Type_descriptor_;
}
bool Data_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int color::kRFieldNumber;
const int color::kGFieldNumber;
const int color::kBFieldNumber;
#endif  // !_MSC_VER

color::color()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:color)
}

void color::InitAsDefaultInstance() {
}

color::color(const color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:color)
}

void color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

color::~color() {
  // @@protoc_insertion_point(destructor:color)
  SharedDtor();
}

void color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return color_descriptor_;
}

const color& color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

color* color::default_instance_ = NULL;

color* color::New() const {
  return new color;
}

void color::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<color*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(r_, b_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_g;
        break;
      }

      // required float g = 2;
      case 2: {
        if (tag == 21) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_b;
        break;
      }

      // required float b = 3;
      case 3: {
        if (tag == 29) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:color)
  return false;
#undef DO_
}

void color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:color)
  // required float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // required float g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // required float b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:color)
}

::google::protobuf::uint8* color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:color)
  // required float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // required float g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // required float b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:color)
  return target;
}

int color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float r = 1;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // required float g = 2;
    if (has_g()) {
      total_size += 1 + 4;
    }

    // required float b = 3;
    if (has_b()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void color::MergeFrom(const color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color::CopyFrom(const color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void color::Swap(color* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = color_descriptor_;
  metadata.reflection = color_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Point::kXFieldNumber;
const int Debug_Point::kYFieldNumber;
const int Debug_Point::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Point::Debug_Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Point)
}

void Debug_Point::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Point::Debug_Point(const Debug_Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Debug_Point)
}

void Debug_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Point::~Debug_Point() {
  // @@protoc_insertion_point(destructor:Debug_Point)
  SharedDtor();
}

void Debug_Point::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Point_descriptor_;
}

const Debug_Point& Debug_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Debug_Point* Debug_Point::default_instance_ = NULL;

Debug_Point* Debug_Point::New() const {
  return new Debug_Point;
}

void Debug_Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(x_, y_);
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col;
        break;
      }

      // optional .color col = 3;
      case 3: {
        if (tag == 26) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Point)
  return false;
#undef DO_
}

void Debug_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional .color col = 3;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Point)
}

::google::protobuf::uint8* Debug_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional .color col = 3;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Point)
  return target;
}

int Debug_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .color col = 3;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Point::MergeFrom(const Debug_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Point::CopyFrom(const Debug_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Point::Swap(Debug_Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Point_descriptor_;
  metadata.reflection = Debug_Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Line::kX1FieldNumber;
const int Debug_Line::kY1FieldNumber;
const int Debug_Line::kX2FieldNumber;
const int Debug_Line::kY2FieldNumber;
const int Debug_Line::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Line::Debug_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Line)
}

void Debug_Line::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Debug_Line)
}

void Debug_Line::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Line_descriptor_;
}

const Debug_Line& Debug_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Debug_Line* Debug_Line::default_instance_ = NULL;

Debug_Line* Debug_Line::New() const {
  return new Debug_Line;
}

void Debug_Line::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Line*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x1_, y2_);
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x1 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y1;
        break;
      }

      // required float y1 = 2;
      case 2: {
        if (tag == 21) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x2;
        break;
      }

      // required float x2 = 3;
      case 3: {
        if (tag == 29) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y2;
        break;
      }

      // required float y2 = 4;
      case 4: {
        if (tag == 37) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_col;
        break;
      }

      // optional .color col = 5;
      case 5: {
        if (tag == 42) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Line)
  return false;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Line)
  // required float x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x1(), output);
  }

  // required float y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y1(), output);
  }

  // required float x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x2(), output);
  }

  // required float y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y2(), output);
  }

  // optional .color col = 5;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Line)
}

::google::protobuf::uint8* Debug_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Line)
  // required float x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x1(), target);
  }

  // required float y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y1(), target);
  }

  // required float x2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x2(), target);
  }

  // required float y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y2(), target);
  }

  // optional .color col = 5;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Line)
  return target;
}

int Debug_Line::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x1 = 1;
    if (has_x1()) {
      total_size += 1 + 4;
    }

    // required float y1 = 2;
    if (has_y1()) {
      total_size += 1 + 4;
    }

    // required float x2 = 3;
    if (has_x2()) {
      total_size += 1 + 4;
    }

    // required float y2 = 4;
    if (has_y2()) {
      total_size += 1 + 4;
    }

    // optional .color col = 5;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Line_descriptor_;
  metadata.reflection = Debug_Line_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Rect::kXFieldNumber;
const int Debug_Rect::kYFieldNumber;
const int Debug_Rect::kWFieldNumber;
const int Debug_Rect::kHFieldNumber;
const int Debug_Rect::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Rect::Debug_Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Rect)
}

void Debug_Rect::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Rect::Debug_Rect(const Debug_Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Debug_Rect)
}

void Debug_Rect::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Rect::~Debug_Rect() {
  // @@protoc_insertion_point(destructor:Debug_Rect)
  SharedDtor();
}

void Debug_Rect::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Rect_descriptor_;
}

const Debug_Rect& Debug_Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Debug_Rect* Debug_Rect::default_instance_ = NULL;

Debug_Rect* Debug_Rect::New() const {
  return new Debug_Rect;
}

void Debug_Rect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Rect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, h_);
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_w;
        break;
      }

      // required float w = 3;
      case 3: {
        if (tag == 29) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h;
        break;
      }

      // required float h = 4;
      case 4: {
        if (tag == 37) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_col;
        break;
      }

      // optional .color col = 5;
      case 5: {
        if (tag == 42) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Rect)
  return false;
#undef DO_
}

void Debug_Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Rect)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w(), output);
  }

  // required float h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h(), output);
  }

  // optional .color col = 5;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Rect)
}

::google::protobuf::uint8* Debug_Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Rect)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w(), target);
  }

  // required float h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h(), target);
  }

  // optional .color col = 5;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Rect)
  return target;
}

int Debug_Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float w = 3;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // required float h = 4;
    if (has_h()) {
      total_size += 1 + 4;
    }

    // optional .color col = 5;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Rect::MergeFrom(const Debug_Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Rect::CopyFrom(const Debug_Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Rect::Swap(Debug_Rect* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Rect_descriptor_;
  metadata.reflection = Debug_Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Circle::kXFieldNumber;
const int Debug_Circle::kYFieldNumber;
const int Debug_Circle::kRFieldNumber;
const int Debug_Circle::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Circle::Debug_Circle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Circle)
}

void Debug_Circle::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Circle::Debug_Circle(const Debug_Circle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Debug_Circle)
}

void Debug_Circle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  r_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Circle::~Debug_Circle() {
  // @@protoc_insertion_point(destructor:Debug_Circle)
  SharedDtor();
}

void Debug_Circle::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Circle_descriptor_;
}

const Debug_Circle& Debug_Circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Debug_Circle* Debug_Circle::default_instance_ = NULL;

Debug_Circle* Debug_Circle::New() const {
  return new Debug_Circle;
}

void Debug_Circle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Circle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(x_, y_);
    r_ = 0;
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Circle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_r;
        break;
      }

      // required float r = 3;
      case 3: {
        if (tag == 29) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col;
        break;
      }

      // optional .color col = 4;
      case 4: {
        if (tag == 34) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Circle)
  return false;
#undef DO_
}

void Debug_Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Circle)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r(), output);
  }

  // optional .color col = 4;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Circle)
}

::google::protobuf::uint8* Debug_Circle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Circle)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r(), target);
  }

  // optional .color col = 4;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Circle)
  return target;
}

int Debug_Circle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float r = 3;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // optional .color col = 4;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Circle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Circle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Circle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Circle::MergeFrom(const Debug_Circle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Circle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Circle::CopyFrom(const Debug_Circle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Circle::Swap(Debug_Circle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(r_, other->r_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Circle_descriptor_;
  metadata.reflection = Debug_Circle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data_Node::kNameFieldNumber;
const int Data_Node::kTypeFieldNumber;
const int Data_Node::kDataFieldNumber;
const int Data_Node::kHintFieldNumber;
#endif  // !_MSC_VER

Data_Node::Data_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data_Node)
}

void Data_Node::InitAsDefaultInstance() {
}

Data_Node::Data_Node(const Data_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Data_Node)
}

void Data_Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data_Node::~Data_Node() {
  // @@protoc_insertion_point(destructor:Data_Node)
  SharedDtor();
}

void Data_Node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  if (this != default_instance_) {
  }
}

void Data_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Node_descriptor_;
}

const Data_Node& Data_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Data_Node* Data_Node::default_instance_ = NULL;

Data_Node* Data_Node::New() const {
  return new Data_Node;
}

void Data_Node::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_hint()) {
      if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data_Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Data_Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Data_Type_IsValid(value)) {
            set_type(static_cast< ::Data_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hint;
        break;
      }

      // optional string hint = 4;
      case 4: {
        if (tag == 34) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hint().data(), this->hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data_Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data_Node)
  return false;
#undef DO_
}

void Data_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data_Node)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Data_Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // optional string hint = 4;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Data_Node)
}

::google::protobuf::uint8* Data_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Data_Node)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Data_Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // optional string hint = 4;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data_Node)
  return target;
}

int Data_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Data_Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string hint = 4;
    if (has_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data_Node::MergeFrom(const Data_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_hint()) {
      set_hint(from.hint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Node::CopyFrom(const Data_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Data_Node::Swap(Data_Node* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(hint_, other->hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_Node_descriptor_;
  metadata.reflection = Data_Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Draw::kPointFieldNumber;
const int Debug_Draw::kLineFieldNumber;
const int Debug_Draw::kRectFieldNumber;
const int Debug_Draw::kCircleFieldNumber;
#endif  // !_MSC_VER

Debug_Draw::Debug_Draw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Draw)
}

void Debug_Draw::InitAsDefaultInstance() {
}

Debug_Draw::Debug_Draw(const Debug_Draw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Debug_Draw)
}

void Debug_Draw::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Draw::~Debug_Draw() {
  // @@protoc_insertion_point(destructor:Debug_Draw)
  SharedDtor();
}

void Debug_Draw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Draw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Draw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Draw_descriptor_;
}

const Debug_Draw& Debug_Draw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Debug_Draw* Debug_Draw::default_instance_ = NULL;

Debug_Draw* Debug_Draw::New() const {
  return new Debug_Draw;
}

void Debug_Draw::Clear() {
  point_.Clear();
  line_.Clear();
  rect_.Clear();
  circle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Draw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Draw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Debug_Point point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectTag(18)) goto parse_line;
        break;
      }

      // repeated .Debug_Line line = 2;
      case 2: {
        if (tag == 18) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_line;
        if (input->ExpectTag(26)) goto parse_rect;
        break;
      }

      // repeated .Debug_Rect rect = 3;
      case 3: {
        if (tag == 26) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect;
        if (input->ExpectTag(34)) goto parse_circle;
        break;
      }

      // repeated .Debug_Circle circle = 4;
      case 4: {
        if (tag == 34) {
         parse_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_circle;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Draw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Draw)
  return false;
#undef DO_
}

void Debug_Draw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Draw)
  // repeated .Debug_Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // repeated .Debug_Line line = 2;
  for (int i = 0; i < this->line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->line(i), output);
  }

  // repeated .Debug_Rect rect = 3;
  for (int i = 0; i < this->rect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect(i), output);
  }

  // repeated .Debug_Circle circle = 4;
  for (int i = 0; i < this->circle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->circle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Draw)
}

::google::protobuf::uint8* Debug_Draw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Draw)
  // repeated .Debug_Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  // repeated .Debug_Line line = 2;
  for (int i = 0; i < this->line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->line(i), target);
  }

  // repeated .Debug_Rect rect = 3;
  for (int i = 0; i < this->rect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect(i), target);
  }

  // repeated .Debug_Circle circle = 4;
  for (int i = 0; i < this->circle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->circle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Draw)
  return target;
}

int Debug_Draw::ByteSize() const {
  int total_size = 0;

  // repeated .Debug_Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .Debug_Line line = 2;
  total_size += 1 * this->line_size();
  for (int i = 0; i < this->line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line(i));
  }

  // repeated .Debug_Rect rect = 3;
  total_size += 1 * this->rect_size();
  for (int i = 0; i < this->rect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rect(i));
  }

  // repeated .Debug_Circle circle = 4;
  total_size += 1 * this->circle_size();
  for (int i = 0; i < this->circle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Draw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Draw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Draw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Draw::MergeFrom(const Debug_Draw& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  line_.MergeFrom(from.line_);
  rect_.MergeFrom(from.rect_);
  circle_.MergeFrom(from.circle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Draw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Draw::CopyFrom(const Debug_Draw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Draw::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rect())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->circle())) return false;
  return true;
}

void Debug_Draw::Swap(Debug_Draw* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    line_.Swap(&other->line_);
    rect_.Swap(&other->rect_);
    circle_.Swap(&other->circle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Draw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Draw_descriptor_;
  metadata.reflection = Debug_Draw_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Function_Data::_default_category_ = NULL;
#ifndef _MSC_VER
const int Function_Data::kNameFieldNumber;
const int Function_Data::kCategoryFieldNumber;
const int Function_Data::kHintFieldNumber;
const int Function_Data::kInDataFieldNumber;
const int Function_Data::kOutDataFieldNumber;
const int Function_Data::kInternalVarFieldNumber;
const int Function_Data::kDrawDataFieldNumber;
#endif  // !_MSC_VER

Function_Data::Function_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Function_Data)
}

void Function_Data::InitAsDefaultInstance() {
  draw_data_ = const_cast< ::Debug_Draw*>(&::Debug_Draw::default_instance());
}

Function_Data::Function_Data(const Function_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Function_Data)
}

void Function_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = const_cast< ::std::string*>(_default_category_);
  hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  draw_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function_Data::~Function_Data() {
  // @@protoc_insertion_point(destructor:Function_Data)
  SharedDtor();
}

void Function_Data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (category_ != _default_category_) {
    delete category_;
  }
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  if (this != default_instance_) {
    delete draw_data_;
  }
}

void Function_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_Data_descriptor_;
}

const Function_Data& Function_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

Function_Data* Function_Data::default_instance_ = NULL;

Function_Data* Function_Data::New() const {
  return new Function_Data;
}

void Function_Data::Clear() {
  if (_has_bits_[0 / 32] & 71) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_category()) {
      if (category_ != _default_category_) {
        category_->assign(*_default_category_);
      }
    }
    if (has_hint()) {
      if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hint_->clear();
      }
    }
    if (has_draw_data()) {
      if (draw_data_ != NULL) draw_data_->::Debug_Draw::Clear();
    }
  }
  in_data_.Clear();
  out_data_.Clear();
  internal_var_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Function_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_category;
        break;
      }

      // optional string category = 2 [default = "Uncategorised"];
      case 2: {
        if (tag == 18) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hint;
        break;
      }

      // optional string hint = 3;
      case 3: {
        if (tag == 26) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hint().data(), this->hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_In_Data;
        break;
      }

      // repeated .Data_Node In_Data = 4;
      case 4: {
        if (tag == 34) {
         parse_In_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_In_Data;
        if (input->ExpectTag(42)) goto parse_Out_Data;
        break;
      }

      // repeated .Data_Node Out_Data = 5;
      case 5: {
        if (tag == 42) {
         parse_Out_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Out_Data;
        if (input->ExpectTag(50)) goto parse_Internal_Var;
        break;
      }

      // repeated .Data_Node Internal_Var = 6;
      case 6: {
        if (tag == 50) {
         parse_Internal_Var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Internal_Var;
        if (input->ExpectTag(58)) goto parse_draw_data;
        break;
      }

      // required .Debug_Draw draw_data = 7;
      case 7: {
        if (tag == 58) {
         parse_draw_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draw_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Function_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Function_Data)
  return false;
#undef DO_
}

void Function_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Function_Data)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string category = 2 [default = "Uncategorised"];
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // optional string hint = 3;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hint(), output);
  }

  // repeated .Data_Node In_Data = 4;
  for (int i = 0; i < this->in_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->in_data(i), output);
  }

  // repeated .Data_Node Out_Data = 5;
  for (int i = 0; i < this->out_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->out_data(i), output);
  }

  // repeated .Data_Node Internal_Var = 6;
  for (int i = 0; i < this->internal_var_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->internal_var(i), output);
  }

  // required .Debug_Draw draw_data = 7;
  if (has_draw_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->draw_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Function_Data)
}

::google::protobuf::uint8* Function_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Function_Data)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string category = 2 [default = "Uncategorised"];
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  // optional string hint = 3;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hint(), target);
  }

  // repeated .Data_Node In_Data = 4;
  for (int i = 0; i < this->in_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->in_data(i), target);
  }

  // repeated .Data_Node Out_Data = 5;
  for (int i = 0; i < this->out_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->out_data(i), target);
  }

  // repeated .Data_Node Internal_Var = 6;
  for (int i = 0; i < this->internal_var_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->internal_var(i), target);
  }

  // required .Debug_Draw draw_data = 7;
  if (has_draw_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->draw_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Function_Data)
  return target;
}

int Function_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string category = 2 [default = "Uncategorised"];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string hint = 3;
    if (has_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hint());
    }

    // required .Debug_Draw draw_data = 7;
    if (has_draw_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draw_data());
    }

  }
  // repeated .Data_Node In_Data = 4;
  total_size += 1 * this->in_data_size();
  for (int i = 0; i < this->in_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->in_data(i));
  }

  // repeated .Data_Node Out_Data = 5;
  total_size += 1 * this->out_data_size();
  for (int i = 0; i < this->out_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_data(i));
  }

  // repeated .Data_Node Internal_Var = 6;
  total_size += 1 * this->internal_var_size();
  for (int i = 0; i < this->internal_var_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_var(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function_Data::MergeFrom(const Function_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  in_data_.MergeFrom(from.in_data_);
  out_data_.MergeFrom(from.out_data_);
  internal_var_.MergeFrom(from.internal_var_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_hint()) {
      set_hint(from.hint());
    }
    if (from.has_draw_data()) {
      mutable_draw_data()->::Debug_Draw::MergeFrom(from.draw_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function_Data::CopyFrom(const Function_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->in_data())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->out_data())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->internal_var())) return false;
  if (has_draw_data()) {
    if (!this->draw_data().IsInitialized()) return false;
  }
  return true;
}

void Function_Data::Swap(Function_Data* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(category_, other->category_);
    std::swap(hint_, other->hint_);
    in_data_.Swap(&other->in_data_);
    out_data_.Swap(&other->out_data_);
    internal_var_.Swap(&other->internal_var_);
    std::swap(draw_data_, other->draw_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_Data_descriptor_;
  metadata.reflection = Function_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AI_Debug::kFrameIdFieldNumber;
const int AI_Debug::kFuncFieldNumber;
const int AI_Debug::kPointFieldNumber;
const int AI_Debug::kLineFieldNumber;
const int AI_Debug::kRectFieldNumber;
const int AI_Debug::kCircleFieldNumber;
#endif  // !_MSC_VER

AI_Debug::AI_Debug()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AI_Debug)
}

void AI_Debug::InitAsDefaultInstance() {
}

AI_Debug::AI_Debug(const AI_Debug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AI_Debug)
}

void AI_Debug::SharedCtor() {
  _cached_size_ = 0;
  frame_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AI_Debug::~AI_Debug() {
  // @@protoc_insertion_point(destructor:AI_Debug)
  SharedDtor();
}

void AI_Debug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AI_Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AI_Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI_Debug_descriptor_;
}

const AI_Debug& AI_Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();
  return *default_instance_;
}

AI_Debug* AI_Debug::default_instance_ = NULL;

AI_Debug* AI_Debug::New() const {
  return new AI_Debug;
}

void AI_Debug::Clear() {
  frame_id_ = 0u;
  func_.Clear();
  point_.Clear();
  line_.Clear();
  rect_.Clear();
  circle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AI_Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AI_Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_func;
        break;
      }

      // repeated .Function_Data func = 2;
      case 2: {
        if (tag == 18) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_func()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_func;
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // repeated .Debug_Point point = 3;
      case 3: {
        if (tag == 26) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_point;
        if (input->ExpectTag(34)) goto parse_line;
        break;
      }

      // repeated .Debug_Line line = 4;
      case 4: {
        if (tag == 34) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line;
        if (input->ExpectTag(42)) goto parse_rect;
        break;
      }

      // repeated .Debug_Rect rect = 5;
      case 5: {
        if (tag == 42) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rect;
        if (input->ExpectTag(50)) goto parse_circle;
        break;
      }

      // repeated .Debug_Circle circle = 6;
      case 6: {
        if (tag == 50) {
         parse_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_circle;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AI_Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AI_Debug)
  return false;
#undef DO_
}

void AI_Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AI_Debug)
  // required uint32 frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_id(), output);
  }

  // repeated .Function_Data func = 2;
  for (int i = 0; i < this->func_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->func(i), output);
  }

  // repeated .Debug_Point point = 3;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  // repeated .Debug_Line line = 4;
  for (int i = 0; i < this->line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line(i), output);
  }

  // repeated .Debug_Rect rect = 5;
  for (int i = 0; i < this->rect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rect(i), output);
  }

  // repeated .Debug_Circle circle = 6;
  for (int i = 0; i < this->circle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->circle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AI_Debug)
}

::google::protobuf::uint8* AI_Debug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AI_Debug)
  // required uint32 frame_id = 1;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_id(), target);
  }

  // repeated .Function_Data func = 2;
  for (int i = 0; i < this->func_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->func(i), target);
  }

  // repeated .Debug_Point point = 3;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(i), target);
  }

  // repeated .Debug_Line line = 4;
  for (int i = 0; i < this->line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->line(i), target);
  }

  // repeated .Debug_Rect rect = 5;
  for (int i = 0; i < this->rect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rect(i), target);
  }

  // repeated .Debug_Circle circle = 6;
  for (int i = 0; i < this->circle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->circle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AI_Debug)
  return target;
}

int AI_Debug::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_id());
    }

  }
  // repeated .Function_Data func = 2;
  total_size += 1 * this->func_size();
  for (int i = 0; i < this->func_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->func(i));
  }

  // repeated .Debug_Point point = 3;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .Debug_Line line = 4;
  total_size += 1 * this->line_size();
  for (int i = 0; i < this->line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line(i));
  }

  // repeated .Debug_Rect rect = 5;
  total_size += 1 * this->rect_size();
  for (int i = 0; i < this->rect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rect(i));
  }

  // repeated .Debug_Circle circle = 6;
  total_size += 1 * this->circle_size();
  for (int i = 0; i < this->circle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AI_Debug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AI_Debug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AI_Debug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AI_Debug::MergeFrom(const AI_Debug& from) {
  GOOGLE_CHECK_NE(&from, this);
  func_.MergeFrom(from.func_);
  point_.MergeFrom(from.point_);
  line_.MergeFrom(from.line_);
  rect_.MergeFrom(from.rect_);
  circle_.MergeFrom(from.circle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AI_Debug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AI_Debug::CopyFrom(const AI_Debug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AI_Debug::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->func())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rect())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->circle())) return false;
  return true;
}

void AI_Debug::Swap(AI_Debug* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    func_.Swap(&other->func_);
    point_.Swap(&other->point_);
    line_.Swap(&other->line_);
    rect_.Swap(&other->rect_);
    circle_.Swap(&other->circle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AI_Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AI_Debug_descriptor_;
  metadata.reflection = AI_Debug_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
